<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My LifeChronicle</title>
    <description>Be a Imagineer.</description>
    <link>https://many258.github.io/</link>
    <atom:link href="https://many258.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 04 Apr 2021 09:19:15 +0900</pubDate>
    <lastBuildDate>Sun, 04 Apr 2021 09:19:15 +0900</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>[데이터통신] 회선 공유 기술</title>
        <description>&lt;h1 id=&quot;회선-공유-기술&quot;&gt;회선 공유 기술&lt;/h1&gt;
&lt;p&gt;하나의 컴퓨터에 여러 개의 단말기가 원거리에서 접속할 경우 단말기 각각에 &lt;strong&gt;직접 접속하는 것은 통신 회선의 비용이 높아&lt;/strong&gt;지므로 경제적인 시스템을 구축할 수 없다.&lt;/p&gt;

&lt;p&gt;따라서, 단말기로부터 근접한 곳에 통신 회선을 공유할 수 있는 장비 및 프로그램을 설치하여 &lt;strong&gt;다수의 단말기가 컴퓨터에 접속&lt;/strong&gt;할 수 있도록 하는 것이 &lt;strong&gt;경제적&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;이처럼 통신 회선을 공유하는 장비 및 프로그램에는 통신 회선을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;정적&lt;/code&gt;으로 나누어 사용하는 다중화기와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;동적&lt;/code&gt;으로 사용하는 집중화기가 존재한다.&lt;/p&gt;

&lt;h2 id=&quot;다중화기&quot;&gt;다중화기&lt;/h2&gt;
&lt;p&gt;하나의 고속 통신 회선을 통해 &lt;strong&gt;일정한 시간이나 주파수&lt;/strong&gt;를 규칙적으로 나누어 사용하는 방식&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;여러 개의 채널들이 하나의 통신 회선을 통하여 결합된 신호의 형태로 전송되고 수신측에서 다시 이를 여러 개의 채널 신호로 분리하는 역할 수행&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;전송 효율을 높일 수 있다&lt;/strong&gt;는 것이 가장 중요한 특징&lt;/li&gt;
  &lt;li&gt;구조가 단순, &lt;strong&gt;규칙적인&lt;/strong&gt; 전송에 사용&lt;/li&gt;
  &lt;li&gt;입출력 각각의 &lt;strong&gt;채널 대역폭이 동일&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;M개의 입력 회선을 M개의 출력 회선으로 다중화하는 장치&lt;/li&gt;
  &lt;li&gt;입력 회선의 수는 출력 회선의 수와 &lt;strong&gt;같아야&lt;/strong&gt; 한다&lt;/li&gt;
  &lt;li&gt;모든 단말기가 항상 사용하는 것이 아니므로 통신 회선에 분배된 시간이나 주파수가 &lt;strong&gt;낭비되는 단점&lt;/strong&gt; 존재&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;집중화기&quot;&gt;집중화기&lt;/h2&gt;
&lt;p&gt;하나의 고속 통신 회선을 통해 하나의 단말기만을 사용할 수 있도록 제한&lt;br /&gt;
하나의 단말기가 고속의 통신 회선을 사용하고 있는 동안 다른 단말기에서 요청한 자원은 &lt;strong&gt;버퍼에서 대기&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;통신 회선을 효율적으로 사용할 수 있으나 각 단말기에서 요청한 신호에 의한 &lt;strong&gt;충돌의 문제가 존재&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;구조가 복잡하며, &lt;strong&gt;불규칙적인&lt;/strong&gt; 전송에 사용&lt;/li&gt;
  &lt;li&gt;입출력 각각의 &lt;strong&gt;채널 대역폭이 다르다&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;입력 회선의 수는 출력 회선의 수보다 &lt;strong&gt;같거나 많아야&lt;/strong&gt; 한다&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;M개의 입력 회선을 N개의 출력 회선으로 집중화하는 장치&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;전위 처리기(FEP: Front End Processor)&lt;br /&gt;
특정한 컴퓨터 시스템이 많은 양의 통신 처리 능력을 갖게 해주는 역할을 수행하는 장치&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;다중화기-분류&quot;&gt;다중화기 분류&lt;/h2&gt;
&lt;h3 id=&quot;주파수-분할-다중화fdm-frequency-division-multiplexing&quot;&gt;주파수 분할 다중화(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FDM&lt;/code&gt;: Frequency Division Multiplexing)&lt;/h3&gt;
&lt;p&gt;통신 회선의 주파수를 여러 개의 작은 대역 폭으로 분할하여 여러 대의 단말기가 동시에 사용할 수 있도록 한 방식&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;채널 간의 상호 간섭을 막기 위해 보호 대역이 필요(대신 채널의 이용률을 저하)&lt;/li&gt;
  &lt;li&gt;전송 매체의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;유효 대역폭&lt;/code&gt;이 클 때 사용&lt;/li&gt;
  &lt;li&gt;전송 매체를 지나는 신호는 &lt;strong&gt;아날로그 신호&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;비용 저렴, 구조 간단&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;비동기식 전송&lt;/strong&gt;이며, &lt;strong&gt;멀티 포인트 방식&lt;/strong&gt;에 적합&lt;/li&gt;
  &lt;li&gt;모뎀의 역할을 겸하므로 &lt;strong&gt;별도 모뎀이 필요 없음&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;전송 지연없이 &lt;strong&gt;실시간 전송&lt;/strong&gt; 가능&lt;/li&gt;
  &lt;li&gt;누화 잡음 및 상호 변조 잡음이 발생&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;시간-분할-다중화tdm-time-division-multiplexing&quot;&gt;시간 분할 다중화(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TDM&lt;/code&gt;: Time Division Multiplexing)&lt;/h3&gt;
&lt;p&gt;한 통신 회선의 대역폭을 일정한 &lt;strong&gt;시간 폭(Time Slot)&lt;/strong&gt;으로 나누어 여러 개의 단말기가 하나의 통신 회선을 사용할 수 있도록 하는 기술&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;전송 매체의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;유효 전송률&lt;/code&gt;이 클 때 사용&lt;/li&gt;
  &lt;li&gt;전송 매체를 지나는 신호는 디지털 신호&lt;/li&gt;
  &lt;li&gt;고가의 비용, 복잡한 기술&lt;/li&gt;
  &lt;li&gt;별도의 모뎀 필요, 누화 잡음 및 상호 변조 잡음이 발생하지 않음&lt;/li&gt;
  &lt;li&gt;전송 지연 없이 실시간 전송이 가능&lt;/li&gt;
  &lt;li&gt;대역폭이 낭비되지 않음&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;동기식-시분할-다중화stdm-synchronous-tdm&quot;&gt;동기식 시분할 다중화(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STDM&lt;/code&gt;: Synchronous TDM)&lt;/h4&gt;
&lt;p&gt;모든 단말기에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;고정된&lt;/code&gt; 시간 폭을 제공&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;매체&lt;/strong&gt;의 데이터 전송률이 &lt;strong&gt;전송 디지털 신호&lt;/strong&gt;의 데이터 전송률을 &lt;strong&gt;능가할 때&lt;/strong&gt; 사용&lt;/li&gt;
  &lt;li&gt;전송할 데이터가 없는 단말 장치에도 타임 슬롯을 할당(전송 용량의 낭비가 크다)&lt;/li&gt;
  &lt;li&gt;고가의 가격, 접속에 소요되는 시간이 늘어난다&lt;/li&gt;
  &lt;li&gt;전송 용량보다 많은 터미널 수에 접속할 수 없다&lt;/li&gt;
  &lt;li&gt;다중화된 회선의 데이터 전송률 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;=&lt;/code&gt; 접속 장치들의 데이터 전송률의 합&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;비동기식-시분할-다중화atdm-asynchronous-tdm-통계적지능적확률적&quot;&gt;비동기식 시분할 다중화(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ATDM&lt;/code&gt;: Asynchronous TDM, 통계적/지능적/확률적)&lt;/h4&gt;
&lt;p&gt;접속된 단말기 중 실제로 전송할 데이터가 있는 단말기에만 시간 폭을 제공&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;매체의 데이터 전송률이 전송 디지털 신호의 데이터 전송률을 &lt;strong&gt;능가하지 않을 때&lt;/strong&gt; 사용하는 다중화 방식&lt;/li&gt;
  &lt;li&gt;전송 매체상의 전송 프레임마다 해당 채널의 시간 슬롯이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;가변적&lt;/code&gt;으로 할당&lt;/li&gt;
  &lt;li&gt;전송 용량의 &lt;strong&gt;낭비가 적다&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;저가의 가격, 접속에 소요되는 시간이 단축&lt;/li&gt;
  &lt;li&gt;같은 속도일 경우 동기식 다중화기보다 &lt;strong&gt;더 많은 수의 터미널에 접속&lt;/strong&gt; 가능&lt;/li&gt;
  &lt;li&gt;다중화된 회선의 데이터 전송률 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; 접속 장치들의 데이터 전송률의 합&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;코드-분할-다중화cdm-code-division-multiplexing&quot;&gt;코드 분할 다중화(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CDM&lt;/code&gt;: Code Division Multiplexing)&lt;/h3&gt;
&lt;p&gt;아날로그 형태인 음성을 디지털 신호로 전환한 후 난수를 부가하여, 여러 개의 &lt;strong&gt;디지털 코드로 변환해 다중화&lt;/strong&gt;하는 것으로 각 채널에 고유한 코드를 부여하여 해당 코드를 가진 단말기만을 인식하게 하는 방식&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;확산 대역 방식&lt;/strong&gt;(하나의 채널로 전달되는 데이터가 여러 경로를 통해 전달)&lt;/li&gt;
  &lt;li&gt;다원 접속 방식은 FDMA, TDMA, CDMA를 모두 사용&lt;/li&gt;
  &lt;li&gt;전송 용량 증가, 전송 품질 및 보안성 향상&lt;/li&gt;
  &lt;li&gt;이동 통신에 사용되는 통신 방식&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;WAP&lt;/strong&gt;(Wireless Application Protocol, 무선 응용 프로그램)&lt;br /&gt;
무선 단말기상에서 인터넷을 이용할 수 있도록 해주는 프로토콜의 총칭&lt;/p&gt;

    &lt;p&gt;WAP에서 사용되는 주 언어가 WML(무선 마크업 언어)이며 휴대 전화와 같은 소형 이동 장비에 맞게 XML 기반으로 설계&lt;br /&gt;
HTML을 수신하는 경우 이를 컴파일해서 최적화된 이진 데이터로 변환하여 이동 단말에 송신&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cell&lt;/strong&gt;&lt;br /&gt;
전파 출력을 낮추어 발사하면 전파가 미치는 영역은 좁아지지만 서비스 지역을 여러 개의 작은 영역으로 분할할 수 있게 된다. 작은 영역마다 기지국을 두어 주파수를 발사하면 동일한 주파수를 다른 작은 영역에서도 사용할 수 있게 된다.&lt;/p&gt;

    &lt;p&gt;이 때, &lt;strong&gt;작은 영역을 셀&lt;/strong&gt;이라고 하며 일정한 영역을 여러 개의 셀로 구분하여 사용하면 &lt;strong&gt;채널 수&lt;/strong&gt;를 셀의 영역 수의 배수만큼 &lt;strong&gt;늘릴 수 있다는 장점&lt;/strong&gt;이 있다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hand-Off&lt;/strong&gt;&lt;br /&gt;
이동 전화 이용자가 하나의 기지국에서 다른 기지국으로 이동하는 과정에서 통화가 끊기지 않게 이어주는 기능
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;소프트&lt;/strong&gt;(Soft) 핸드오프&lt;br /&gt;
&lt;strong&gt;기지국과 기지국&lt;/strong&gt; 간에 발생하는 핸드오프 방식으로 하나의 기지국이 이동 전화 이용자의 채널을 먼저 확보하여 &lt;strong&gt;연결한 후&lt;/strong&gt;, 현재 사용 중인 채널의 연결을 끊는 방식&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;하드&lt;/strong&gt;(Hard) 핸드오프&lt;br /&gt;
&lt;strong&gt;교환기와 교환기&lt;/strong&gt; 간에 발생하는 핸드오프 방식으로 기지국이 &lt;strong&gt;기존 신호를 끊은 뒤&lt;/strong&gt; 다른 기지국으로 신호를 넘기는 방식&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;소프터&lt;/strong&gt;(Softer) 핸드오프&lt;br /&gt;
&lt;strong&gt;기지국 내 섹터 간에 발생&lt;/strong&gt;하는 핸드오프 방식으로 같은 기지국 내의 특정 섹터에서 통화하다가 다른 섹터 영역으로 통화 접근을 할 때 소프트 핸드오프와 같은 방법으로 통화 채널을 연결&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Roaming&lt;/strong&gt;&lt;br /&gt;
이동 통신 가입자가 가입된 관리 지역을 벗어나 어디서나 자유롭게 통신할 수 있는 기술&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Bluetooth&lt;/strong&gt;&lt;br /&gt;
휴대폰끼리 또는 휴대폰과 PC 간에 사진이나 벨소리 등의 파일을 전송하는 무선 전송 기술&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;L2CAP&lt;/strong&gt;(Logical Link Control And Adaptation Protocol)&lt;br /&gt;
블루투스 베이스밴드의 상위에 위치하는 프로토콜이며 상위의 프로토콜 스택에 대하여 다중 통신 기능, 데이터의 분할과 조합, 오류 제어, 인증, 암호화를 정의&lt;/p&gt;

    &lt;p&gt;기본적으로 Connection-Oriented 프로토콜을 제공하지만 Connectionless 방식도 제공한다. 하지만 Connectionless 방식은 많이 사용 되지 않는다. 고정된 최대 크기 만큼의 Reliable한 전송을 제공한다. L2CAP의 전송 Reliability는 설정이 가능하며 3가지 정책이 사용 가능하다.&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;재전송를 하지 않는다&lt;/li&gt;
      &lt;li&gt;모든 전송이 실패하기 전까지 재전송 시도&lt;/li&gt;
      &lt;li&gt;특정 시간(0-1279 miliseconds) 후까지 ack이 오지 않았을 경우 패킷을 버리고 큐에 보관된 다음 패킷을 전송.(이 경우는 시간에 따라서 데이터가 전송되어야 할 경우 유효하다)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;역-다중화기inverse-multiplexer&quot;&gt;역 다중화기(Inverse Multiplexer)&lt;/h2&gt;
&lt;p&gt;하나의 통신 회선으로 데이터를 전송받은 것을 두 개의 음성 대역 회선으로 나누는 장치&lt;/p&gt;

&lt;p&gt;광대역 통신 회선을 사용하기 않고 9600bps 이상의 광대역 속도를 얻을 수 있어 &lt;strong&gt;통신 비용을 줄일 수 있다&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;고속의 선로를 두 개의 낮은 선로로 전송한 후 다시 원래 속도로 변환&lt;/li&gt;
  &lt;li&gt;두 개의 음성 대역 회선을 이용하여 &lt;strong&gt;광 대역 통신 속도&lt;/strong&gt;를 얻을 수 있다&lt;/li&gt;
  &lt;li&gt;두 회선의 전송 속도의 차이로 상대적인 전송 지연이 발생할 수 있고 이를 조절하기 위한 &lt;strong&gt;순환 기억 장치&lt;/strong&gt; 필요&lt;/li&gt;
  &lt;li&gt;여러 가지 변화에 대응해 여러 가지의 전송 속도를 얻을 수 있다&lt;/li&gt;
  &lt;li&gt;음성 대역의 변/복조기 역할을 수행&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;위성-통신&quot;&gt;위성 통신&lt;/h2&gt;
&lt;p&gt;인공위성을 통하여 지구상의 어느 곳이든 통신할 수 있도록 하는 통신 방법&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;주로 3 ~ 30GHz인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHF&lt;/code&gt;(Super high frequency, 초고주파) 주파수를 이용하여 통신 위성의 중계를 거쳐 먼 거리까지 통신하는 방식&lt;/li&gt;
  &lt;li&gt;항상 마주 보이는 안테나가 있어야 통신이 가능(많은 곳에 위성 중계기가 필요)&lt;/li&gt;
  &lt;li&gt;하나의 정지 위성 Cover 비율이 이론적으로 지구 표면에 42.4%이므로 3개의 정지 위성만 있으면 극 지역을 제외한 지구상의 어떤 지점과도 통신이 가능&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;점 대 점&lt;/strong&gt;에서만 가능&lt;/li&gt;
  &lt;li&gt;전송 지연이 존재&lt;/li&gt;
  &lt;li&gt;지구국은 &lt;strong&gt;교외에 설치&lt;/strong&gt;해야 한다(동일 채널 잡음이 발생하므로)&lt;/li&gt;
  &lt;li&gt;보안성이 떨어지며 &lt;strong&gt;기후에 영향&lt;/strong&gt;을 받는다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;위성 통신의 기본 구조
    &lt;ul&gt;
      &lt;li&gt;기기계 : 구조계, 자세 제어계, 열 제어계, 전력계, 추진계, 원격 측정 명령계&lt;/li&gt;
      &lt;li&gt;통신계 :
        &lt;ul&gt;
          &lt;li&gt;위성 중계기(트랜스 폰더) : 지구국(지상)으로부터 송신되어 온 신호 주파수를 송신 주파수로 바꿔 &lt;strong&gt;증폭하는 역할&lt;/strong&gt; 수행&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 03 Apr 2021 00:00:00 +0900</pubDate>
        <link>https://many258.github.io/study/data-communication-line-sharing/</link>
        <guid isPermaLink="true">https://many258.github.io/study/data-communication-line-sharing/</guid>
        
        <category>데이터통신</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>[데이터통신] 데이터 오류 제어</title>
        <description>&lt;h1 id=&quot;데이터-오류-제어&quot;&gt;데이터 오류 제어&lt;/h1&gt;
&lt;h2 id=&quot;오류-발생-원인&quot;&gt;오류 발생 원인&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;상호 변조 잡음&lt;/strong&gt;(Inter Modulation Noise)&lt;br /&gt;
서로 다른 주파수들이 똑같은 전송 매체를 공유할 때 이 주파수들이 서로의 합과 차의 신호를 발생함으로써 발생되는 채널의 간섭 현상&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;누화 잡음&lt;/strong&gt;(Cross Talk Noise)&lt;br /&gt;
인접한 전송 매체의 &lt;strong&gt;전기적인 신호의 결합&lt;/strong&gt;으로 생기는 잡음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;동일 채널 잡음&lt;/strong&gt;&lt;br /&gt;
두 개 이상의 채널이 &lt;strong&gt;동일한 주파수를 사용&lt;/strong&gt;하게 될 때 발생하는 잡음&lt;br /&gt;
위성 통신에서 사용하는 주파수와 도심속에서 사용하는 주파수가 가끔 동일할 때 이러한 잡음이 발생한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;방사 잡음&lt;/strong&gt;&lt;br /&gt;
높은 주파수 대역을 사용하는 &lt;strong&gt;위성 통신에서 주로 발생&lt;/strong&gt;하는 잡음으로 전송 신호의 주 신호에서 새어 나가는 신호를 의미&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;지연 왜곡&lt;/strong&gt;(Delay Distortion)&lt;br /&gt;
주로 하드와이어 전송 매체에서 발생되며, 전송 매체를 통한 신호 전달이 주파수에 따라 그 속도를 달리함으로써 유발되는 신호 손상 현상으로 주파수의 중심 주파수와 양쪽 끝 주파수 강도의 차이 때문에 발생하는 오류&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;열 잡음&lt;/strong&gt;(Thermal Noise), &lt;strong&gt;백색 잡음&lt;/strong&gt;(White Noise)&lt;br /&gt;
전송 매체 내에서 &lt;strong&gt;온도 변화에 따른 전자 운동량이 변함&lt;/strong&gt;으로써 발생하는 잡음으로 모든 전자/전기적인 전송 매체에서 발생.
&lt;strong&gt;열 잡음은 위성 통신에서는 발생하지 않음&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;손실, 감쇠 현상, 누화 잡음, 충격성 잡음&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;오류-제어-방식&quot;&gt;오류 제어 방식&lt;/h2&gt;
&lt;h3 id=&quot;순방향전진-오류-수정fec--forward-error-correction&quot;&gt;순방향(전진) 오류 수정(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FEC&lt;/code&gt; : Forward Error Correction)&lt;/h3&gt;
&lt;p&gt;송신측에서 전송 프레임에 잉여 비트를 추가하여 수신츠겡서 오류를 검사하고 &lt;strong&gt;수정까지 할 수 있도록&lt;/strong&gt; 하여 송신측에서는 같은 프레임을 &lt;strong&gt;재전송하는 일이 없도록&lt;/strong&gt; 하는 방식&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;종류 : 해밍코드, 상승 코드&lt;/li&gt;
  &lt;li&gt;송신 측이 한 개이고 수신측이 여러 개일 경우에 사용하는 방식&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;역방향후진-오류-수정bec--backward-error-correction&quot;&gt;역방향(후진) 오류 수정(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BEC&lt;/code&gt; : Backward Error Correction)&lt;/h3&gt;
&lt;p&gt;송신측에서 전송되어 온 프레임들 중 오류가 있는 &lt;strong&gt;프레임을 판단&lt;/strong&gt;하여 오류가 발생되면 송신측에 통보하여 &lt;strong&gt;다시 재전송&lt;/strong&gt; 받는 방식&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;종류 : CRC, 패리티 비트, BSC(블록 합 : Block Sum Check)&lt;/li&gt;
  &lt;li&gt;ARQ(Automatic Repeat reQuest)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;arqautomatic-repeat-request--오류-검출-후-재전송&quot;&gt;ARQ(Automatic Repeat reQuest : 오류 검출 후 재전송)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Stop-And-Wait ARQ&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;한 번에 한 개의 프레임&lt;/strong&gt;을 전송&lt;br /&gt;
한 개의 프레임을 전송한 후 수신측의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACK&lt;/code&gt;나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NAK&lt;/code&gt;를 기다린다&lt;br /&gt;
ACK → 다음 프레임 전송&lt;br /&gt;
NAK, 일정시간 무응답 → 같은 프레임 재전송&lt;br /&gt;
재전송이 있을 수 있으므로 송신측에 버퍼가 한 개 필요&lt;br /&gt;
오버헤드로 인한 부담이 크다&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BASIC&lt;/code&gt; 전송 절차에서 사용하는 오류 제어 방식&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Go-Back-N ARQ&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;여러 개의 프레임&lt;/strong&gt;을 전송&lt;br /&gt;
수신측의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NAK&lt;/code&gt; 신호가 도착하지 않으면 계속적으로 전송&lt;br /&gt;
수신측의 &lt;strong&gt;응답이 없으면 긍정적인 응답&lt;/strong&gt;으로 간주&lt;br /&gt;
오류가 발생하면 &lt;strong&gt;오류가 발생한 프레임부터 다시&lt;/strong&gt; 전송&lt;br /&gt;
&lt;strong&gt;중복 전송 문제&lt;/strong&gt;가 발생&lt;br /&gt;
오류가 적은 전송일 때 효율적&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HDLC&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SDLC&lt;/code&gt; 전송 절차에서 사용되는 오류 제어 방식&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Selective-Repeat ARQ&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;여러 개의 프레임&lt;/strong&gt;을 전송&lt;br /&gt;
수신측의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NAK&lt;/code&gt; 신호가 도착하지 않으면 계속적으로 전송&lt;br /&gt;
수신측의 &lt;strong&gt;응답이 없으면 긍정적인 응답&lt;/strong&gt;으로 간주&lt;br /&gt;
오류가 발생하면 &lt;strong&gt;오류가 발생한 프레임&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;만&lt;/code&gt; 재전송&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;중복 전송 문제를 보완&lt;/strong&gt;한 방식&lt;br /&gt;
일부분을 재전송하면 수신측에서는 재결합을 해야 하므로 &lt;strong&gt;많은 버퍼&lt;/strong&gt;가 필요&lt;br /&gt;
기술적으로 복잡하여 Go-Back-N ARQ에 비해 사용되는 경우가 적다&lt;br /&gt;
&lt;strong&gt;오류가 많을 때&lt;/strong&gt; 주로 사용&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HDLC&lt;/code&gt; 전송 절차에서 사용되는 오류 제어 방식&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Dynamically ARQ&lt;/strong&gt;&lt;br /&gt;
동적으로 프레임을 전송&lt;br /&gt;
수신측에서는 &lt;strong&gt;오류 발생 확률&lt;/strong&gt;을 송신측에 전송&lt;br /&gt;
송신측은 적절한 개수를 수신측에 동적으로 전송&lt;br /&gt;
전송 효율의 향상 기대&lt;br /&gt;
제어 기술이 매우 복잡하고 비용 문제로 인해 거의 사용하지 않음&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;오류-검출-방식&quot;&gt;오류 검출 방식&lt;/h2&gt;
&lt;h3 id=&quot;해밍코드hamming-code&quot;&gt;해밍코드(Hamming Code)&lt;/h3&gt;
&lt;p&gt;데이터비트에 몇 개의 체크비트가 추가된 형태로 수신측에서 에러 비트의 위치와 정정이 가능하므로 &lt;strong&gt;자기 정정 부호&lt;/strong&gt;라고 한다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1비트의 오류만 수정이 가능하며, 2비트의 오류 검출은 가능하나 수정을 불가능하다&lt;/li&gt;
  &lt;li&gt;정보 비트 외에 잉여 비트가 많이 필요하므로 많은 양의 데이터 전송에 유리하다&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;$2^p &amp;gt;= d + p + 1$&lt;br /&gt;
&lt;sub&gt;d: 데이터 비트 / p: 체크 비트&lt;/sub&gt;&lt;/p&gt;

  &lt;p&gt;패리티 비트의 위치 = $2^n, (n=0,1,2…)$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;데이터 크기가 8비트라 가정할 때, 위 식에 대입 시 패리티 비트는 4가 되어 4비트의 추가 비트가 필요하다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/images/network/data-communication/hamming-code.png&quot; alt=&quot;&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;짝수패리티라 가정할 때, 각 검사 시 총 ‘1’의 개수가 짝수가 되도록 확인하여 Pn 값을 입력한다&lt;/p&gt;

&lt;p&gt;P1 : 1번째 비트에서 시작하여 1비트 간격으로 검사&lt;br /&gt;
P2 : 2번째 비트에서 시작하여 2비트 간격으로 검사&lt;br /&gt;
P3 : 4번째 비트에서 시작하여 4비트 간격으로 검사&lt;br /&gt;
P4 : 8번째 비트에서 시작하여 8비트 간격으로 검사&lt;br /&gt;
= Pn : P$^{n-1}$번째 비트에서 시작하여 P$^{n-1}$비트 간격으로 검사&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/images/network/data-communication/hamming-code-detection.png&quot; alt=&quot;&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 테이블에서 P1, P3을 보면 총 ‘1’의 개수가 홀수이므로 오류임을 알 수 있다. 그렇기 때문에 P1, P3을 ‘1’로 오류가 없는 P2, P3를 ‘0’으로 가정한다.&lt;/p&gt;

&lt;p&gt;이 때, P4/P3/P2/P1(컴퓨터가 인식하는 2진수는 오른쪽부터 시작하므로)으로 나열했을 때 각 위의 값을 넣어주면 최종적으로 0101 값이 구해지고 결과값은 5이므로 5번째 비트가 오류임을 확인할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;상승-코드부호-방식&quot;&gt;상승 코드(부호) 방식&lt;/h3&gt;
&lt;p&gt;순차적 디코딩과 한계값 디코딩을 사용하여 오류를 수정&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;여러 개의 비트 오류가 있더라도 모두 수정할 수 있는 방식&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;군-계수-검사-방식&quot;&gt;군 계수 검사 방식&lt;/h3&gt;
&lt;p&gt;전송되는 정보 비트열 중 ‘1’의 개수를 세어서 2진수로 변환한 다음 &lt;strong&gt;2진수 끝의 두 비트&lt;/strong&gt;를 전송되는 정보 비트열에 추가하여 전송하는 방식&lt;/p&gt;

&lt;h3 id=&quot;패리티-비트&quot;&gt;패리티 비트&lt;/h3&gt;
&lt;p&gt;잉여 비트를 추가하여 전송 오류의 검출을 위해 사용한다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;전송 비트 내 ‘1’의 개수가 짝수 또는 홀수 개가 되도록 결정&lt;/li&gt;
  &lt;li&gt;짝수 개의 비트가 오류가 발생할 경우 검출률이 낮아지는 단점 존재&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;수직-중복-검사vrc-vertical-redundancy-check-1차원-패리티&quot;&gt;수직 중복 검사(VRC: Vertical Redundancy Check, 1차원 패리티)&lt;/h3&gt;
&lt;p&gt;오류 검출 방식에서 가장 적은 비용이 들며 가장 널리 사용되는 기법으로 보통 패리티 검사라고 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;패리티 비트를 각 정보 비트에 추가하여 패리티 비트를 포함한 정보 비트 내의 ‘1’의 전체 개수를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;짝수&lt;/code&gt;가 되도록 한다&lt;/li&gt;
  &lt;li&gt;패리티 비티의 위치는 고정되지 않고 앞/뒤/중간 어디든 사용 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;세로-중복-검사lrc-longitudinal-redundancy-check-2차원-패리티&quot;&gt;세로 중복 검사(LRC: Longitudinal Redundancy Check, 2차원 패리티)&lt;/h3&gt;
&lt;p&gt;전송 비트를 &lt;strong&gt;일정량의 블록&lt;/strong&gt;으로 묶어서 블록의 맨 마지막에 패리티 비트를 부여&lt;/p&gt;

&lt;h3 id=&quot;순환-중복-방식crc-cycle-redundancy-check&quot;&gt;순환 중복 방식(CRC: Cycle Redundancy Check)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;다항식&lt;/strong&gt; 코드를 사용하여 오류를 검출하는 방식&lt;br /&gt;
정보 비트열 전부를 한 번에 검사하지 않고 &lt;strong&gt;부분적&lt;/strong&gt;으로 중첩되게 검사하므로, 집단/군집 오류 검출 방식이라고도 한다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;동기식 전송&lt;/strong&gt;에 주로 사용&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HDLC&lt;/code&gt; 프레임의 &lt;strong&gt;FCS&lt;/strong&gt; 블록에서 사용&lt;/li&gt;
  &lt;li&gt;가장 많이 사용되는 오류 검출 방식&lt;/li&gt;
  &lt;li&gt;1개, 2개, 홀수 개의 오류는 완벽하게 검출&lt;/li&gt;
  &lt;li&gt;매우 복잡하나 &lt;strong&gt;오류를 수정할 수 있는 방식이 아님&lt;/strong&gt;을 주의&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;검사-합checksum&quot;&gt;검사 합(Checksum)&lt;/h3&gt;
&lt;p&gt;패리티 검사나 CRC와 같이 중복의 개념을 기반으로 하여 네트워크를 통해 전달된 값이 변경되었는지를 검사하는 값으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;무결성&lt;/code&gt;을 제공&lt;/p&gt;

&lt;p&gt;송신측에서 전송할 모든 데이터를 16 비트 워드 단위로 구분하고 1의 보수를 취한 뒤 그 합에 대한 결과를 전송한다.
수신측은 같은 합을 하여 오류를 검출한다(&lt;strong&gt;검사합의 값이 0 이면 오류 없음, 0이 아니면 오류 있음&lt;/strong&gt;)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;간단한 방식이나 워드의 &lt;strong&gt;순서가 바뀌는 오류에 대한 검출은 불가&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;보통 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;16비트&lt;/code&gt; 워드 단위로 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rs-부호reedsolomon-error-correction&quot;&gt;RS 부호(Reed–Solomon error correction)&lt;/h3&gt;
&lt;p&gt;Reed와 Solomon이 개발한 군집 형태의 오류를 수정할 수 있는 코드로 콤팩트 디스크에 사용되는 CIRC(교차 인터리브 리드 솔로몬 부호)이다. 하드 디스크에 사용된 LDC(긴거리 부호) 와 DVD에 사용된 RSPC(리드 솔로몬 적부호) 등이 있다.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Apr 2021 00:00:00 +0900</pubDate>
        <link>https://many258.github.io/study/data-communication-error-control/</link>
        <guid isPermaLink="true">https://many258.github.io/study/data-communication-error-control/</guid>
        
        <category>데이터통신</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>[IT이슈] 2021년 가트너 9가지 기술 전략</title>
        <description>&lt;h1 id=&quot;2021년-가트너-기술-전략&quot;&gt;2021년 가트너 기술 전략&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/images/IT-issue/gartner-trends-2021.png&quot; alt=&quot;&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;embed-responsive embed-responsive-16by9&quot;&gt;
  &lt;iframe class=&quot;embed-responsive-item&quot; width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/s3rlYWcwdDY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 class=&quot;align-center&quot; id=&quot;사람-중심people-centricity&quot;&gt;사람 중심(People Centricity)&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;팬데믹 사태가 사람들의 일하는 방식 그리고 조직과 상호작용하는 방식을 변화시켰을지라도 여전히 사람이 모든 기업의 중심입니다. 따라서, 현재와 같은 환경에서 기업이 작동하기 위해선 프로세스를 디지털화해야 할 필요가 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;행동인터넷iob-internet-of-behaviors&quot;&gt;행동인터넷(IoB, Internet of Behaviors)&lt;/h3&gt;
&lt;p&gt;IoB는 데이터를 수집하고 사용하여 사람의 행동을 유도하거나 변경하는 것을 의미한다.&lt;/p&gt;

&lt;p&gt;디지털과 물리적인 세계에서 일상 생활에 대한 데이터를 수집할 수 있는 기술이 증가함에 따라, 데이터를 사람들의 행동에 영향을 미치는 데 사용할 수 있게 되었습니다. 그러나 행동 인터넷은 사용 목적과 결과에 따라 윤리적, 사회적인 영향을 주기도 한다는 점을 유의해야 합니다.&lt;/p&gt;

&lt;h3 id=&quot;전체-경험tx-total-experience--통합-경험&quot;&gt;전체 경험(TX, Total Experience = 통합 경험)&lt;/h3&gt;
&lt;p&gt;다중 경험(MX, MultieXperience), 고객 경험(CX, Customer eXperience), 직원 경험(EX, Employee eXperience) 및 사용자 경험(UX, User eXperience)을 결합한 것을 의미한다. 전체 경험 목표는 기술부터 직원, 고객 및 사용자에 이르기까지의 이러한 모든 요소가 교차하는 전반적인 경험을 개선하는 것이다.&lt;/p&gt;

&lt;h3 id=&quot;개인정보보호-강화-컴퓨팅privacy-enhancing-computation&quot;&gt;개인정보보호 강화 컴퓨팅(Privacy-Enhancing Computation)&lt;/h3&gt;
&lt;p&gt;개인 정보 보호 강화 컴퓨팅에는 사용되는 동안 데이터 처리와 분석을 통해 데이터를 보호하는 세 가지 기술이다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;민감한 데이터를 처리하거나 분석할 수 있는 신뢰할 수 있는 환경을 제공한다.&lt;/li&gt;
  &lt;li&gt;분산된 방식으로 처리 및 분석을 수행한다.&lt;/li&gt;
  &lt;li&gt;처리 또는 분석 전에 데이터와 알고리즘을 암호화한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이처럼 개인정보보호 강화 컴퓨팅 기술은 개인적인 데이터를 노출하지 않으며, 이 접근 방식은 개인 정보 또는 보안을 유지하면서 데이터를 공유해야 하는 필요성이 증가할 수 있도록 특별히 설계되어야 한다.&lt;/p&gt;

&lt;h2 id=&quot;위치-독립성location-independence&quot;&gt;위치 독립성(Location Independence)&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;COVID-19는 조직의 생태계에서 물리적인 공간을 사라지게 했습니다. 이러한 새로운 형태로 비즈니스가 유지되기 위해선 기술의 전환이 필요합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;분산-클라우드distributed-cloud&quot;&gt;분산 클라우드(Distributed Cloud)&lt;/h3&gt;
&lt;p&gt;분산 클라우드는 퍼블릭 클라우드 서비스가 서로 다른 물리적 위치에 분산되어 있지만 운영, 업데이트, 서비스 개선 등은 퍼블릭 클라우드 제공자가 담당하는 것을 의미한다.&lt;/p&gt;

&lt;p&gt;분산 클라우드는 다음과 같은 이점을 지니고 있습니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;데이터 비용을 절감시키고 특정한 지역에 있어야 하는 데이터 관련 규제 법률을 수용할 수 있게 합니다.&lt;/li&gt;
  &lt;li&gt;클라우드 서비스가 로컬 또는 반 로컬 서브넷에 존재하기 때문에 네트워크 장애 위험을 감소시켜 줍니다.&lt;/li&gt;
  &lt;li&gt;클라우드 서비스를 호스팅하거나 사용할 수 있는 영역의 수와 가용성을 매우 증가시킬 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;가트너는 분산 클라우드가 클라우드의 미래라고 보며, 2024년까지 대부분의 클라우드 서비스 플랫폼이 필요에 따라 분산 클라우드 서비스를 제공할 것으로 전망하고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;어디서나-운영anywhere-operation&quot;&gt;어디서나 운영(Anywhere Operation)&lt;/h3&gt;
&lt;p&gt;COVID-19에서 기업이 성공적으로 부상하려면 어디서나 운영 모델이 필수적이다. 핵심적으로 이 운영 모델은 고객, 고용주 및 비즈니스 파트너가 물리적으로 원격 환경에서 운영되는 곳 어디에서나 비즈니스에 접근하고 제공하고 활성화할 수 있도록 해야 한다.&lt;/p&gt;

&lt;p&gt;어디서나 작동하는 모델은 ‘디지털 우선, 원격 우선(Digital first, Remote first)’이다.&lt;/p&gt;

&lt;h3 id=&quot;사이버-보안-메시cybersecurity-mesh&quot;&gt;사이버 보안 메시(Cybersecurity Mesh)&lt;/h3&gt;
&lt;p&gt;자신 또는 개인이 어디에 있든 보안 경계 밖에 존재하는 모든 디지털 자산에 안전하게 접근할 수 있도록 하는 기술을 의미하며, 확장 가능하고 유연하며 안정적인 사이버 보안 제어에 대한 분산 아키텍처 접근 방식이다.&lt;/p&gt;

&lt;p&gt;이제 많은 자산이 기존 보안 경계 외부에 존재한다. 사이버 보안망은 기본적으로 사람이나 사물의 신원과 위치를 중심으로 보안의 경계가 정의되도록 합니다. 이러한 사이버 보안망은 정책 조정을 중앙 집중화하고 정책 시행을 분산하여 더욱 모듈화되고 주의가 필요한 보안 접근 방식을 가능하게 합니다.&lt;/p&gt;

&lt;h2 id=&quot;회복-탄력성resilient-delivery&quot;&gt;회복 탄력성(Resilient Delivery)&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;전 세계의 불황은 언제나 존재해왔습니다. 조직이 이에 대응하고 적응한다면 수 많은 혼란을 극복할 수 있을 것입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;지능형-구성-가능한-비지니스intelligent-composable-business&quot;&gt;지능형 구성 가능한 비지니스(Intelligent Composable Business)&lt;/h3&gt;
&lt;p&gt;현재 상황에 따라 적응하고 근본적으로 재정렬할 수 있는 비즈니스를 의미한다.&lt;/p&gt;

&lt;p&gt;끊임없이 증가하는 속도 변화에 따라 조직이 나아가기 위해선 모듈화, 자율성, 조정, 발견을 기반으로 결합을 강조하는 사고방식을 갖추어야 합니다. 또한 조직이 디지털 트렌스포메이션을 더욱 빠르게 추진하려면 디지털 비즈니스 전략을 가속화하고, 이에 따라 현재 이용할 수 있는 데이터를 기반으로 민첩하고 빠른 비즈니스 결정을 내려야 합니다.&lt;/p&gt;

&lt;p&gt;이를 성공적으로 수행하기 위해 조직은 정보에 대한 더 나은 액세스를 가능하게 하고 더 나은 통찰력으로 정보를 보강하며 해당 통찰력의 의미에 신속하게 대응할 수 있는 능력을 갖추어야 한다. 여기에는 조직 전체의 자율성과 민주화가 포함되어 비효율적인 프로세스에 의해 방해받지 않고 기업의 일부가 신속하게 대응할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;ai-엔지니어링ai-engineering&quot;&gt;AI 엔지니어링(AI Engineering)&lt;/h3&gt;
&lt;p&gt;강력한 AI 엔지니어링 전략은 AI 투자의 전체 가치를 제공하면서 AI 모델의 성능, 확장성, 해석 가능성 및 안정성을 촉진한다. AI 프로젝트는 종종 유지 보수성, 확장성 및 거버넌스와 관련된 문제에 직면하여 대부분의 조직에 문제가 될 수 있다.&lt;/p&gt;

&lt;p&gt;AI 엔지니어링은 경로를 제공하여 AI를 전문적이고 격리된 프로젝트 세트가 아닌 주류 DevOps 프로세스의 일부로 구현된다. 여러 AI 기술의 조합을 운영할 때 가치에 대한 명확한 경로를 제공하면서 AI 과대광고를 자제시키기 위해 다양한 분야를 통합한다. 또 AI 엔지니어링의 거버넌스 측면으로 인해 ‘책임감있는 AI (Responsible AI)’가 신뢰, 투명성, 윤리, 공정성, 해석 가능성 및 규정 준수 문제를 처리하기 위해 등장하고 있다. 이에 대응해야 될 것이다.&lt;/p&gt;

&lt;p&gt;즉, 그것은 AI 책임의 운영화로 AI 솔루션을 개발하거나 사용하는 모든 조직은 AI 위험이 브랜드를 위태롭게 하거나 규제 조치를 취하거나 보이콧으로 이어지거나 비즈니스 가치를 파괴하지 않도록 사전에 대처해야 한다.&lt;/p&gt;

&lt;h3 id=&quot;초자동화hyperautomation&quot;&gt;초자동화(Hyperautomation)&lt;/h3&gt;
&lt;p&gt;조직에서 자동화할 수 있는 것은 무엇이든 자동화해야 한다는 것이다.&lt;/p&gt;

&lt;p&gt;초자동화는 효율적이지 않은 레거시 비즈니스 프로세스를 보유한 조직이 주도하여 조직에 막대한 비용과 광범위한 문제를 야기한다. 많은 조직들이 희박하거나, 최적화되거나, 연결되거나, 깨끗하거나, 명시적이지 않은 기술의 ‘패치워크(patchwork)’에 의해 지원을 받는다. 동시에 디지털 비즈니스의 가속화는 효율성과 속도, 민주화를 필요로 한다. 효율성, 효율성, 비즈니스 민첩성에 집중하지 않는 조직은 뒤처질 것이다.&lt;/p&gt;

&lt;h3 id=&quot;참고자료&quot;&gt;참고자료&lt;/h3&gt;
&lt;p&gt;2021 가트너 전략 기술 트랜드&lt;br /&gt;
https://www.wedesignx.com/knowledge/2021-gartner-strategic-technology-trend-top-9&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Mar 2021 00:00:00 +0900</pubDate>
        <link>https://many258.github.io/study/it-issue-gartner/</link>
        <guid isPermaLink="true">https://many258.github.io/study/it-issue-gartner/</guid>
        
        <category>IT트랜드</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>[데이터통신] 데이터 전송 제어</title>
        <description>&lt;h1 id=&quot;데이터-링크-제어&quot;&gt;데이터 링크 제어&lt;/h1&gt;
&lt;p&gt;데이터 통신망에 접속된 컴퓨터나 단말 장치가 오류 없이 투명한 정보를 효율적이고 원할하게 송/수신하기 위하여 데이터 통신 시스템이 갖추어야 할 제어 기술로 데이터 입출력, 동기 제어, 오류 제어 등을 포함한다&lt;/p&gt;

&lt;h1 id=&quot;데이터-전송-제어-절차&quot;&gt;데이터 전송 제어 절차&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;회선접속&lt;br /&gt;
  일반 교환망에서의 물리적인 접속 단계&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;데이터 링크의 확립&lt;br /&gt;
  데이터 송수신을 위한 논리적인 경로를 구성하는 단계&lt;br /&gt;
  (링크 확립 방법 : &lt;strong&gt;Selection&lt;/strong&gt;, &lt;strong&gt;Polling&lt;/strong&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;데이터 전송&lt;br /&gt;
  송수신측 간의 메시지 전송 단계&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;데이터 링크의 해제 통보 &lt;br /&gt;
  링크 확립을 종료하는 단계로 논리적인 경로를 해제하는 단계&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;회선 절단&lt;br /&gt;
  교환망에 연결된 회선 접속 단계로 물리적인 접속을 해제하는 단계&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;데이터-전송-프레임&quot;&gt;데이터 전송 프레임&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;전송 프레임&lt;/strong&gt; : 수신측의 입장에서 보면 전송되는 모든 정보가 ‘1’과 ‘0’으로 수신되는데, 이 때 수신된 비트열이 어디서부터 제어 영역이고 어디서부터 정보 영역인지를 미리 &lt;strong&gt;약속&lt;/strong&gt;하지 않는다면 정상적으로 수신된 비트 열일지라도 다른 의미를 갖는 정보로 해석될 수 있다.&lt;/p&gt;

&lt;p&gt;따라서, 7비트(&lt;strong&gt;문자 지향 프레임&lt;/strong&gt;), 8비트(&lt;strong&gt;바이트 지향 프레임&lt;/strong&gt;, DEC사의 DDCMP), &lt;strong&gt;비트 지향 프레임&lt;/strong&gt;을 부여하여 송수신하도록 해야 한다. 이처럼 송신측에서 발생된 정보의 정확한 전송을 위해 사용자 정보에 헤더와 트레일러를 부과하는 과정을 &lt;strong&gt;캡슐화&lt;/strong&gt;라고 하며, 이러한 형식화된 데이터 블록을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;프레임&lt;/code&gt;이라고 한다&lt;/p&gt;

&lt;h2 id=&quot;문자-지향-프레임&quot;&gt;문자 지향 프레임&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;IBM사의 &lt;strong&gt;BASIC&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;전송 방향은 &lt;strong&gt;반이중&lt;/strong&gt; 방식으로만 사용&lt;/li&gt;
  &lt;li&gt;회선 연결은 점 대 점 방식뿐만 아니라 멀티 포인트 링크에서도 사용될 수 있다&lt;/li&gt;
  &lt;li&gt;같은 전송 회선만 가능(&lt;strong&gt;종속적&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;오류 제어 방식은 &lt;strong&gt;Stop-And-Wait&lt;/strong&gt; ARQ를 사용&lt;/li&gt;
  &lt;li&gt;오류 검출이 어렵고, 전송 효율이 나쁘다&lt;/li&gt;
  &lt;li&gt;주로 동기 전송 방식을 사용하나 &lt;strong&gt;비동기 전송 방식&lt;/strong&gt;을 사용하기도 한다&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;../../assets/images/network/data-communication/character-oriented-frame.png&quot; alt=&quot;&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;BCC(Block Check Character) 검사 범위 : &lt;strong&gt;[Heading - STX - Text - ETX]&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;source : http://egloos.zum.com/nooriry/v/1598115&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;비트-지향-프레임&quot;&gt;비트 지향 프레임&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;ISO의 HDLC, IBM사의 SDLC, 미 국방성 TCP&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;../../assets/images/network/data-communication/bit-oriented-frame.png&quot; alt=&quot;&quot; class=&quot;align-center&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;source : http://www.rhyshaden.com/hdlc.htm&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;flag&quot;&gt;FLAG&lt;/h3&gt;
&lt;p&gt;프레임 구조의 앞과 뒤를 구분하는 비트 열(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'01111110'&lt;/code&gt;, ‘7E’)&lt;/p&gt;

&lt;p&gt;통신 회선을 공유하는 모든 다른 프레임들과 구분하는 비트 열로 송신측에서는 송신하기 전에 송신 메시지 앞과 뒤에 추가하여 전송
FLAG 비트를 제외한 모든 비트는 연속된 ‘1’의 비트가 6개 이상이 되지 않도록 강제적으로 ‘0’을 추가하여 송신.&lt;/p&gt;

&lt;p&gt;수신측은 FLAG 비트를 제외한 비트 열에 ‘1’의 문자가 연속적으로 5개가 입력되면 5개 다음에 입력된 ‘0’ 비트를 제거한다. 이처럼 ‘0’을 삽입하고 ‘0’을 제거하여 기본적인 오류를 검출하고 신뢰성 있는 송수신이 되도록 하는 기능을 &lt;strong&gt;비트 투과성&lt;/strong&gt;(Bit Transparency) 또는 &lt;strong&gt;비트 스터핑&lt;/strong&gt;(Bit Stuffing)이라고 한다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프레임의 앞과 뒤를 구분&lt;/li&gt;
  &lt;li&gt;동기를 유지&lt;/li&gt;
  &lt;li&gt;비트 투과성으로 기본적인 오류를 검출&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;address&quot;&gt;ADDRESS&lt;/h3&gt;
&lt;p&gt;상대국이나 복합국의 주소를 지정할 때 사용하는 블록으로 기본적으로 &lt;strong&gt;8비트를 사용하며 8바이트&lt;/strong&gt;까지 확장 가능&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1바이트를 사용할 시, 방송용 주소(11111111)와 시험용(00000000)을 제외하면 실제 주소는 254개 부여 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;control&quot;&gt;CONTROL&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;I(Information)&lt;/strong&gt; 프레임
    &lt;ul&gt;
      &lt;li&gt;순수한 정보만을 전송하는 프레임&lt;/li&gt;
      &lt;li&gt;첫 번째 비트가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'0'&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;사용자 데이터를 전달하거나 피기백킹 기법을 통해 데이터에 대한 확인 응답을 보낼 때 사용&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;피기백킹&lt;/strong&gt; : 데이터 프레임에 확인응답을 포함시켜 전송하는 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;S(Supervisor)&lt;/strong&gt; 프레임
    &lt;ul&gt;
      &lt;li&gt;정보 전송 프레임을 감시/감독하는 프레임으로 흐름제어, 에러 제어를 담당하는 프레임&lt;/li&gt;
      &lt;li&gt;상위 두 비트가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'10'&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;RR(00, 수신 완료), REJ(01, 수신 거부), RNR(10, 수신 준비 안 됨)등의 제어 명령이 존재&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;U(Unnumbered)&lt;/strong&gt; 프레임
    &lt;ul&gt;
      &lt;li&gt;통신하기 위한 초기 설정 및 링크 확립과 해제 등의 명령이 있는 프레임&lt;/li&gt;
      &lt;li&gt;상위 두 비트가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'11'&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;SMD(Set Mode)의 기능
        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;strong&gt;NRM&lt;/strong&gt;(Normal Response Mode, UNC, &lt;strong&gt;표준 응답 모드&lt;/strong&gt;)&lt;br /&gt;
주 스테이션이 링크 제어를 담당하며, 부 스테이션은 주 스테이션으로부터 메시지를 수신한 경우에만 데이터를 전송할 수 있다(&lt;strong&gt;반이중 통신&lt;/strong&gt;)&lt;br /&gt;
점 대 점이나 멀티 포인트 불균형 링크 구성에 사용&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;strong&gt;ARM&lt;/strong&gt;(Asynchronous Response Mode, UAC, &lt;strong&gt;비동기 응답 모드&lt;/strong&gt;)&lt;br /&gt;
주 스테이션이 링크 제어를 담당하며, 부 스테이션은 주 스테이션으로부터 메시지가 없어도 데이터를 전송할 수 있다(&lt;strong&gt;전이중 통신&lt;/strong&gt;)&lt;br /&gt;
점 대 점이나 멀티포인트 불균형 링크 구성에 사용&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;strong&gt;ABM&lt;/strong&gt;(Asynchronous Balance Mode, BAC, &lt;strong&gt;비동기 균형 모드&lt;/strong&gt;)&lt;br /&gt;
주 스테이션과 부 스테이션의 구분이 없이 동등하다&lt;br /&gt;
링형이나 망형 구조의 균형 링크 구성에 사용(&lt;strong&gt;전이중 통신&lt;/strong&gt;)&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;strong&gt;SIM&lt;/strong&gt;(Set Initial Mode, 모드 설정 초기화)&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;정보부&quot;&gt;정보부&lt;/h3&gt;
&lt;p&gt;사용자 사이에서 교환되는 정보 메시지 블록의 길이, 구성과 관계없이 송수신 간 협의에 따른다&lt;/p&gt;

&lt;h3 id=&quot;fcsframe-check-sequence-프레임-검사-순서부&quot;&gt;FCS(Frame Check Sequence, 프레임 검사 순서부)&lt;/h3&gt;
&lt;p&gt;주소부/제어부/정보부 블록의 오류를 검사하는 블록으로 오류 검사 방법은 주로 &lt;strong&gt;CRC 방식&lt;/strong&gt;을 사용&lt;/p&gt;

&lt;h3 id=&quot;hdlc-특징&quot;&gt;HDLC 특징&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;전송 방향 : 단방향/반이중/전이중 방식 모두 사용 가능&lt;/li&gt;
  &lt;li&gt;회선 연결 : 점 대 점, 멀티포인트, 루프 방식 모두 사용 가능&lt;/li&gt;
  &lt;li&gt;오류 제어 방식 : ARQ(&lt;strong&gt;Go-Back-N&lt;/strong&gt;, &lt;strong&gt;Seletive-repeat&lt;/strong&gt;) 사용&lt;/li&gt;
  &lt;li&gt;다른 전송 회선도 가능(&lt;strong&gt;독립적&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;동기식 전송&lt;/strong&gt;으로 전송 효율과 신뢰성이 높다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;기타-프레임&quot;&gt;기타 프레임&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;SDLC&lt;/strong&gt;(Synchronous Data Link Control)
    &lt;ul&gt;
      &lt;li&gt;HDLC를 기반으로 하는 비트 위주 데이터 링크 제어 프로토콜&lt;/li&gt;
      &lt;li&gt;X.25 패킷 교환망 표준의 한 부분으로 &lt;strong&gt;ITU-T&lt;/strong&gt;에 의해 제정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;LAP-B&lt;/strong&gt;(Link Access Procedure Balanced)
    &lt;ul&gt;
      &lt;li&gt;X.25 패킷 교환망의 표준으로 &lt;strong&gt;ITU-T&lt;/strong&gt;에서 제정한 HDLC 기반으로 하는 비트 위주 프레임&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;LAP-D&lt;/strong&gt;(Link Access Procedure D channel)
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;ISDN&lt;/strong&gt;의 D채널을 위한 프레임 혹은 데이터 링크 제어 프로토콜&lt;/li&gt;
      &lt;li&gt;LAP-B와는 달리 &lt;strong&gt;다중화된 채널을 성립&lt;/strong&gt;시킬 수 있다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;LLC&lt;/strong&gt;(Logical Link Control)
    &lt;ul&gt;
      &lt;li&gt;LAN에서 사용되는 대표적인 프레임.(IEEE802 표준 계열)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SLIP&lt;/strong&gt;(Serial Line Internet Protocol)
    &lt;ul&gt;
      &lt;li&gt;전화선과 모뎀을 이용하여 인터넷에 접속하기 위한 프레임&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PPP&lt;/strong&gt;(Point-to-Point Protocol)
    &lt;ul&gt;
      &lt;li&gt;전화선과 모뎀을 이용하여 인터넷에 접속하기 위한 프레임&lt;/li&gt;
      &lt;li&gt;SLIP을 개선하여 &lt;strong&gt;에러를 검출하고 복구&lt;/strong&gt;하는 기능 존재&lt;/li&gt;
      &lt;li&gt;HDLC와 유사한 점이 있으나 &lt;strong&gt;문자 위주 프레임&lt;/strong&gt;이다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 28 Mar 2021 00:00:00 +0900</pubDate>
        <link>https://many258.github.io/study/data-communication-transmission-control/</link>
        <guid isPermaLink="true">https://many258.github.io/study/data-communication-transmission-control/</guid>
        
        <category>데이터통신</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>[데이터통신] 데이터 전송</title>
        <description>&lt;h1 id=&quot;데이터-전송-방식&quot;&gt;데이터 전송 방식&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;아날로그 전송&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;전송 매체를 통해 전달되는 신호가 아날로그 형태인 것(사람의 음성, 화상)&lt;/li&gt;
      &lt;li&gt;신호의 감쇠 현상이 심하기 때문에 증폭기에 의해 신호를 중간에 다시 증폭하여 전송해야 하는데 신호에 포함된 잡음까지 같이 증폭&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;디지털 전송&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;전송 매체를 통해 전달되는 신호가 디지털 형태인 것&lt;/li&gt;
      &lt;li&gt;신호에 포함된 잡음은 제거하고 0과 1만을 추출하여 증폭되므로 왜곡 현상이 없다&lt;/li&gt;
      &lt;li&gt;아날로그 전송과 비교하여 유지 비용이 적다&lt;/li&gt;
      &lt;li&gt;디지털 신호 변환에 의해 아날로그나 디지털 정보의 암호화가 쉽게 구현 가능&lt;/li&gt;
      &lt;li&gt;전송 용량을 다중화함으로써 효율성이 높음&lt;/li&gt;
      &lt;li&gt;아날로그 전송보다 훨씬 &lt;strong&gt;많은 대역폭을 필요&lt;/strong&gt;로 하고, 전송 거리가 짧기 때문에 증폭기가 많이 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;데이터-비트의-전송-방법&quot;&gt;데이터 비트의 전송 방법&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;직렬 전송
    &lt;ul&gt;
      &lt;li&gt;정보를 구성하는 각 비트들이 하나의 전송 매체를 통해 한 비트씩 순서적으로 전송되는 형태&lt;/li&gt;
      &lt;li&gt;하나의 전송 매체만 사용하므로 &lt;strong&gt;속도는 느리지만&lt;/strong&gt; 구성 비용이 적다&lt;/li&gt;
      &lt;li&gt;원거리 전송에 적합&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;병렬 전송
    &lt;ul&gt;
      &lt;li&gt;정보를 구성하는 각 비트들이 여러 개의 전송 매체를 통해 동시에 전송되는 형태&lt;/li&gt;
      &lt;li&gt;여러 개의 전송 매체를 사용하므로 전송 속도는 &lt;strong&gt;빠르지만&lt;/strong&gt; 구성 비용이 많이 소요&lt;/li&gt;
      &lt;li&gt;근거리 전송에 적합하며 주로 컴퓨터와 주변장치 사이의 데이터 전송에 사용&lt;/li&gt;
      &lt;li&gt;흐름 제어 필요 :
        &lt;ul&gt;
          &lt;li&gt;수신측이 현재 데이터 수신중임을 알리기 위해 Busy 신호 사용&lt;/li&gt;
          &lt;li&gt;문자와 문자 단위를 식별하기 위해 Strobe 사용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;데이터-전송-방향&quot;&gt;데이터 전송 방향&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;단방향 전송(Simplex)&lt;br /&gt;
한쪽 방향으로만 데이터 전송이 이루어지는 방식&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;양방향 전송(Duplex)&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;반이중 전송(Half-Duplex)
        &lt;ul&gt;
          &lt;li&gt;한쪽에서 데이터 전송이 되면 다른 한쪽에서는 전송이 끝나기를 기다리는 방식&lt;/li&gt;
          &lt;li&gt;전송 &lt;strong&gt;방향을 바꾸는 시간&lt;/strong&gt;이 필요&lt;/li&gt;
          &lt;li&gt;통신 회선이 비교적 적을 때 사용&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;2선식 선로&lt;/strong&gt;를 두어 송신과 수신을 번갈아 전송&lt;/li&gt;
          &lt;li&gt;전송 지연에 문제가 있으며 &lt;strong&gt;반환 시간(Turn-Around Time)이 길다&lt;/strong&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;전이중 전송(Full-Duplex)
        &lt;ul&gt;
          &lt;li&gt;전송 시간에 구애를 받지 않는다&lt;/li&gt;
          &lt;li&gt;전송량이 많고 통신 회선의 용량이 클 때 사용&lt;/li&gt;
          &lt;li&gt;통신 회선의 &lt;strong&gt;효율이 높다&lt;/strong&gt;&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;4선식 선로&lt;/strong&gt;를 두어 송신과 수신을 별도로 전송&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;동기화&quot;&gt;동기화&lt;/h1&gt;
&lt;p&gt;송신 측과 수신 측이 정확히 데이터를 주고 받을 수 있도록 양측에 시간을 맞추는 것을 의미. 이 때 양측의 &lt;strong&gt;시간을 일치&lt;/strong&gt;시키는 것을 &lt;strong&gt;동기식 전송&lt;/strong&gt;, 송신 측에 관계없이 수신 측에서 &lt;strong&gt;수신 신호로 시간을 식별&lt;/strong&gt;하는 것을 &lt;strong&gt;비동기식 전송&lt;/strong&gt;이라고 한다.&lt;/p&gt;

&lt;h2 id=&quot;비동기식-전송&quot;&gt;비동기식 전송&lt;/h2&gt;
&lt;p&gt;시작 비트, 전송 문자(정보 비트), 정지 비트로 구성된 한 문자를 단위로 전송하며, 오류 검출을 위한 패리티 비트를 추가하기도 한다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;간헐적으로 시간을 맞춘다&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;독립적, 문자 단위&lt;/strong&gt; 전송&lt;/li&gt;
  &lt;li&gt;문자와 문자 사이의 &lt;strong&gt;휴지 기간&lt;/strong&gt;이 존재&lt;/li&gt;
  &lt;li&gt;한꺼번에 많은 데이터를 보내면 프레이밍 에러의 가능성이 높아진다&lt;/li&gt;
  &lt;li&gt;약 2Kbps 이하의 &lt;strong&gt;저속&lt;/strong&gt;, &lt;strong&gt;단거리&lt;/strong&gt; 전송에 사용&lt;/li&gt;
  &lt;li&gt;대화용 전송에 적당&lt;/li&gt;
  &lt;li&gt;버퍼를 적게 사용&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ASK, FSK&lt;/strong&gt; 방식에 적합&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;전송 효율 = $\frac{정보 비트}{전송 비트} \times 100\%$&lt;br /&gt;
&lt;sub&gt;전송 비트 = 정보 비트 + 제어 비트(동기 문자, 오류 검출 비트)&lt;/sub&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;프레이밍 에러&lt;/strong&gt;(Framing Error) : 송신 측과 수신 측의 샘플링 시점이 달라서 발생하는 오류. 비동기 전송에서 start bit 와 stop bit 사이에 더 많은 비트들을 전송함으로써 오버헤드 비율을 줄일 수 있으나 비트들이 많을 수록 프레이밍 에러가 발생할 가능성이 높아진다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;동기식-전송&quot;&gt;동기식 전송&lt;/h2&gt;
&lt;p&gt;미리 정해진 수만큼의 문자열을 한 블록(프레임)으로 만들어 일시에 전송하는 방식&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;연속적&lt;/strong&gt;으로 시간을 맞춘다&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;종속적, 블록(프레임) 단위&lt;/strong&gt; 전송&lt;/li&gt;
  &lt;li&gt;송신, 수신 양쪽의 동기를 유지하기 위해 타이밍 신호를 계속적으로 공급하거나 동기 문자를 전송&lt;/li&gt;
  &lt;li&gt;프레임 단위로 전송하므로 속도가 빠르다&lt;/li&gt;
  &lt;li&gt;시작/종료 비트로 인한 오버헤드가 없고, 휴지 기간이 없으므로 &lt;strong&gt;전송 효율이 좋다&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;단말기는 반드시 버퍼 기억장치에 내장하여야 한다&lt;/li&gt;
  &lt;li&gt;PSK, QAM 방식에 적당&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;문자 동기 방식&lt;/strong&gt; : SYN 등의 전송 제어 문자에 의해 동기를 맞추는 방식으로 BSC 프로토콜에서 사용&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;비트 동기 방식&lt;/strong&gt; : 데이터 블록의 처음과 끝에 8비트의 플래그 비트를 표시하여 동기를 맞추는 방식으로, HDLC/SDLC/ADCCP 프로토콜에서 사용(전송 에러 검출을 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FSC&lt;/code&gt;(Frame Check Sequence) 이용)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;데이터-전송-형태&quot;&gt;데이터 전송 형태&lt;/h1&gt;
&lt;h2 id=&quot;베이스밴드-전송기저-대역-전송-baseband-transmission&quot;&gt;베이스밴드 전송(기저 대역 전송, Baseband Transmission)&lt;/h2&gt;
&lt;p&gt;원래의 신호를 다른 주파수 대역으로 변조하지 않고 전송하거나 정보를 0과 1로 표시하고 이것을 직류의 전기 신호로 전송하는 방식&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;보통 하나의 회선에 하나의 채널을 사용&lt;/li&gt;
  &lt;li&gt;10Mbps 이하의 전송 속도&lt;/li&gt;
  &lt;li&gt;소규모 데이터 전송에 적합&lt;/li&gt;
  &lt;li&gt;신호는 양방향으로 진행&lt;/li&gt;
  &lt;li&gt;모뎀이 필요 없어 비용이 저렴하나 전송거리가 짧음&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;단극 RZ, 양극 NRZ-L, NRZ-M, Bipolar, Manchester&lt;/strong&gt; 등이 있다&lt;/li&gt;
  &lt;li&gt;CSMA/CD 방식, Token Ring 방식에서 채택&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;브로드밴드-전송반송-대역-전송-broadband-transmission&quot;&gt;브로드밴드 전송(반송 대역 전송, Broadband Transmission)&lt;/h2&gt;
&lt;p&gt;디지털 신호를 반송파의 진폭, 주파수, 위상 등으로 변환하여 아날로그를 전송하는 방식&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;회선당 20 ~ 30개의 채널을 사용&lt;/li&gt;
  &lt;li&gt;150Mbps 이하의 전송속도&lt;/li&gt;
  &lt;li&gt;대규모의 멀티미디어에 적합한 방식&lt;/li&gt;
  &lt;li&gt;신호는 단방향으로 진행&lt;/li&gt;
  &lt;li&gt;Token Bus 방식에서 채택&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;데이터-전송-속도&quot;&gt;데이터 전송 속도&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;데이터 신호 속도(bps)&lt;br /&gt;
부호를 구성하는 데이터의 비트 수가 1초 동안에 얼마나 전송되었는가를 나타내는 단위
    &lt;blockquote&gt;
      &lt;p&gt;데이터 신호 속도(bps) = 변조 속도(Baud) X 변조 시 상태 변화 수&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;변조 속도(Baud)&lt;br /&gt;
신호의 변조 과정에서 1초 동안 몇 회의 변조가 행해졌는가를 나타내는 것을 의미.
    &lt;blockquote&gt;
      &lt;p&gt;B = $\frac{1}{T}$ &lt;sub&gt;T: 단위 시간당 펄스의 수&lt;/sub&gt;&lt;br /&gt;
$= \frac{bps}{변조 시 상태 변화 수}$&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;베어러 속도&lt;br /&gt;
보통 베어러 속도를 반송 속도라고 하며 데이터 신호에 동기 신호와 상태 신호를 합한 속도(단위 bps = bit/sec)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Nyquist의 공식&lt;br /&gt;
잡음이 없는 채널의 전송 속도(bps)와 주파수(W)의 관계식
    &lt;blockquote&gt;
      &lt;p&gt;$C = 2W\log_2L$&lt;br /&gt;
&lt;sub&gt;C : bps / W : 대역폭 / L : 신호 레벨&lt;/sub&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Shannon의 공식&lt;br /&gt;
잡음이 있는 채널의 전송 속도(bps)와 주파수(W)의 관계식
    &lt;blockquote&gt;
      &lt;p&gt;$C=W\log_2(1+S/N)$&lt;br /&gt;
&lt;sub&gt;C : bps / W : 대역폭 / S/N : 신호 대 잡음비&lt;/sub&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;데이터-전송-코드&quot;&gt;데이터 전송 코드&lt;/h1&gt;
&lt;h2 id=&quot;baudot-코드&quot;&gt;Baudot 코드&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;초기의 전송용 코드로 5비트로 구성&lt;/li&gt;
  &lt;li&gt;오류 검출 코드가 없다&lt;/li&gt;
  &lt;li&gt;코드의 확장 기능이 있다&lt;/li&gt;
  &lt;li&gt;텔렉스(최초의 문자 전송 시스템으로 문자 정보를 텔렉스 교환기를 사용해서 전송하는 시스템) 코드로 이용&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ascii-code&quot;&gt;ASCII Code&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;(American Standard Code for Information Interchange)&lt;/li&gt;
  &lt;li&gt;ISO에서 제정한 코드이며 7비트(패리티 비트 추가 시 8비트)로 구성된 데이터 통신용 코드&lt;/li&gt;
  &lt;li&gt;순차적인 코드(알파벳이나 숫자가 순서적 코드로 되어 있다)&lt;/li&gt;
  &lt;li&gt;정보 문자와 제어 문자로 구분&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ascii-코드-제어-문자&quot;&gt;ASCII 코드 제어 문자&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;전송 제어 : 통신 선로의 데이터 흐름을 제어
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;SOH&lt;/strong&gt;(Start Of Head) : 머리말의 시작&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;STX&lt;/strong&gt;(Start of TeXt) : 본문의 시작 혹은 머리말의 종료&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;ETX&lt;/strong&gt;(End of TeXt) : 본문을 종료&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;EOT&lt;/strong&gt;(End Of Transmission) : 전송의 종료, 링크 해제를 요청&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;ENQ&lt;/strong&gt;(ENQuire) : 링크 설정 요청, 상대국의 응답을 요청한다&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;ACK&lt;/strong&gt;(ACKnowledge) : 긍정적인 응답, 다음 프레임을 요청&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;DLE&lt;/strong&gt;(Data Link Escape) : 보조적인 제어 문자, 통신망에서 전송 제어 문자를 구분&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;NAK&lt;/strong&gt;(Negative AcKnowledge) : 부정적인 응답 및 재전송 요구&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;SYN&lt;/strong&gt;(SYNchronous) : 시간 맞춤 행위를 위한 동기 문자&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;ETB&lt;/strong&gt;(End of Transmission Block) : 블록의 종료를 표시&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;포멧 제어 : 데이터의 출력 및 정보의 레이아웃을 제어
    &lt;ul&gt;
      &lt;li&gt;BS(Back Space)&lt;/li&gt;
      &lt;li&gt;HT(Horizontal Tabulation)&lt;/li&gt;
      &lt;li&gt;LF(Line Feed)&lt;/li&gt;
      &lt;li&gt;VT(Vertical Tab)&lt;/li&gt;
      &lt;li&gt;FF(Form Feed)&lt;/li&gt;
      &lt;li&gt;CR(Carriage Return)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;장치 제어 : 단말기의 보조 장치를 제어&lt;/li&gt;
  &lt;li&gt;정보 분리 : 데이터의 논리적 요소를 분리
    &lt;ul&gt;
      &lt;li&gt;US(Unit Separator)&lt;/li&gt;
      &lt;li&gt;RS(Record Separator)&lt;/li&gt;
      &lt;li&gt;GS(Group Separator)&lt;/li&gt;
      &lt;li&gt;FS(File Separator)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bcdbinary-coded-decimal&quot;&gt;BCD(Binary Coded Decimal)&lt;/h2&gt;
&lt;p&gt;컴퓨터 내부 코드로 10진수를 표현하기 위하여 주로 사용&lt;br /&gt;
데이터 비트가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6비트&lt;/code&gt;로 구성되므로 총 64개의 문자 표현이 가능&lt;/p&gt;

&lt;h2 id=&quot;ebcdicextended-binary-coded-decimal-interchange-code&quot;&gt;EBCDIC(Extended Binary Coded Decimal Interchange Code)&lt;/h2&gt;
&lt;p&gt;IBM 컴퓨터의 내부 코드로 사용되며 컴퓨터와 컴퓨터 사이에 데이터 전송 코드로 사용&lt;/p&gt;

&lt;p&gt;8비트로 구성되며 총 256문자 표현이 가능&lt;/p&gt;

&lt;h2 id=&quot;unicode&quot;&gt;UNICODE&lt;/h2&gt;
&lt;p&gt;서로 다른 언어를 사용하는 컴퓨터들이 문제없이 통신하도록 모든 문자 체계를 하나의 문자 집합으로 만든 것. 숫자와 글자(키와 값)가 1:1 매핑된 형태의 코드&lt;/p&gt;

&lt;p&gt;Character set = UTF(Unicode Transformation Format) : 포함시키고자 하는 문자 집합을 정의&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UTF-8
    &lt;ul&gt;
      &lt;li&gt;하나의 문자를 1 ~ 4바이트의 가변 길이로 표현&lt;/li&gt;
      &lt;li&gt;현재 인터넷에서 가장 많이 쓰이면 인코딩이며 뛰어난 크로스 플랫폼 호환성을 지님&lt;/li&gt;
      &lt;li&gt;웹, 데이터베이스에서 주로 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UTF-16
    &lt;ul&gt;
      &lt;li&gt;모든 문자를 2바이트의 고정 길이로 표현&lt;/li&gt;
      &lt;li&gt;바이트 순서가 정해지지 않아 리틀/빅 에디안 문제가 발생하기 때문에 인터넷 상에서의 사용을 권고하지 않음&lt;/li&gt;
      &lt;li&gt;윈도우 계열에서 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UTF-32
    &lt;ul&gt;
      &lt;li&gt;모든 문자를 4바이트의 고정 길이로 표현&lt;/li&gt;
      &lt;li&gt;저장 공간의 낭비가 심하다는 단점이 존재&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 27 Mar 2021 00:00:00 +0900</pubDate>
        <link>https://many258.github.io/study/data-communication-transmission/</link>
        <guid isPermaLink="true">https://many258.github.io/study/data-communication-transmission/</guid>
        
        <category>데이터통신</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>[데이터통신] 신호 변환기</title>
        <description>&lt;h1 id=&quot;신호-변환기의-종류&quot;&gt;신호 변환기의 종류&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;MODEM&lt;/strong&gt;&lt;br /&gt;
 &lt;strong&gt;디지털 데이터를 아날로그 신호&lt;/strong&gt;로 변환시키는 장비로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PSTN&lt;/code&gt;(공중 전화망)에 접속되는 장비&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DSU&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;디지털 데이터를 전송망에 적합한 디지털 신호&lt;/strong&gt;로 변환시키는 장비로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PSDN&lt;/code&gt;(공중 데이터망)에 접속되는 장비&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CODEC&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;아날로그 데이터를 디지털 신호&lt;/strong&gt;로 변환시키는 장비로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCM&lt;/code&gt;이 대표적인 예&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Telephone&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;아날로그 데이터를 아날로그 신호&lt;/strong&gt;로 변환시키는 장비로 빠르고 멀리 전송하기 위해 음성 대역 의 낮은 주파수를 &lt;strong&gt;높은 주파수로 변환&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;modemmodulator--demodulator&quot;&gt;MODEM(Modulator / Demodulator)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;기존의 공중 통신망을 이용하여 데이터 전송을 하기 위해 사용&lt;/li&gt;
  &lt;li&gt;음성 통신 회선은 사람의 음성 신호와 같은 아날로그 신호를 전송하기에 적합&lt;/li&gt;
  &lt;li&gt;공중 전화망을 음성 정보뿐만 아니라 디지털 전송으로 재사용하기 위해 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;기능&quot;&gt;기능&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;변/복조 기능이 존재&lt;/li&gt;
  &lt;li&gt;펄스를 전송 신호로 변환&lt;/li&gt;
  &lt;li&gt;자동 호출 / 자동 응답 기능 존재&lt;/li&gt;
  &lt;li&gt;고장 장애 시험이 가능&lt;/li&gt;
  &lt;li&gt;데이터 통신 및 속도를 제어할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;분류&quot;&gt;분류&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;동기&lt;/strong&gt; 방식에 의한 분류
    &lt;ul&gt;
      &lt;li&gt;비동기식 모뎀 방식 : 진폭 편이 변조(ASK), 주파수 편이 변조(FSK)&lt;/li&gt;
      &lt;li&gt;동기식 모뎀 방식 : 위상 편이 변조(PSK), 진폭 위상 편이 변조(QAM)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;포트&lt;/strong&gt; 수에 의한 분류
    &lt;ul&gt;
      &lt;li&gt;단 포트 모뎀&lt;br /&gt;
중속도(2,400bps 이하)에 사용되는 모뎀으로 하나의 포트에 연결&lt;/li&gt;
      &lt;li&gt;멀티 포트 모뎀&lt;br /&gt;
포트의 수가 2/4/6개 등 여러 개의 포트가 내장되어 있는 모뎀&lt;/li&gt;
      &lt;li&gt;널 모뎀&lt;br /&gt;
중간에 모뎀 또는 기타 데이터 통신 기기(DCE)를 사용하지 않고 터미널과 컴퓨터 사이에 RS-232C를 이용하여 직접 접속하는 모뎀&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;속도&lt;/strong&gt;에 의한 분류
    &lt;ul&gt;
      &lt;li&gt;저속도 모뎀(300bps 이하) : ASK&lt;/li&gt;
      &lt;li&gt;중속도 모뎀(1200 ~ 4800bps) : FSK, PSK&lt;/li&gt;
      &lt;li&gt;고속 모뎀(4800 ~ ) : QAM&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;모뎀의-신호-변환-방식&quot;&gt;모뎀의 신호 변환 방식&lt;/h3&gt;
&lt;h4 id=&quot;askamplitutde-shift-keying--진폭-편이-변조&quot;&gt;ASK(Amplitutde Shift Keying : 진폭 편이 변조)&lt;/h4&gt;
&lt;p&gt;디지털 데이터의 ‘1’과 ‘0’을 진폭의 크기만 다르게 하여 전송하는 방식&lt;/p&gt;

&lt;h4 id=&quot;fskfrequency-shift-keying--주파수-편이-변조&quot;&gt;FSK(Frequency Shift Keying : 주파수 편이 변조)&lt;/h4&gt;
&lt;p&gt;디지털 데이터의 ‘1’과 ‘0’을 주파수의 주기 수를 다르게 하여 전송하는 방식&lt;/p&gt;

&lt;h4 id=&quot;pskphase-shift-keying--위상-편이-변조&quot;&gt;PSK(Phase Shift Keying : 위상 편이 변조)&lt;/h4&gt;
&lt;p&gt;디지털 데이터의 ‘1’과 ‘0’을 위상(각도, 위치)을 다르게 하여 전송하는 방식&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DPSK&lt;/strong&gt;(Differential PSK)&lt;br /&gt;
차등 인코딩을 사용하는 2위상 PSK&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;QDPSK&lt;/strong&gt;(Quadrature DPSK)&lt;br /&gt;
차등 인코딩을 사용하는 4위상 PSK&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;M위상(M진) PSK&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;p&gt;$M=2^{전송\ 비트}, 전송\ 비트 = \log_2M$&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;qskquadrature-amplitude-modulation--진폭-위상-변조-직교-위상-변조&quot;&gt;QSK(Quadrature Amplitude Modulation : 진폭 위상 변조, 직교 위상 변조)&lt;/h4&gt;
&lt;p&gt;디지털 데이터의 진폭과 위상을 변조하여 전송하는 방식&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Coherent 방식&lt;br /&gt;
단일 주파수, 같은 모양의 위상. 동기와 유사&lt;/li&gt;
  &lt;li&gt;Non-Coherent 방식&lt;br /&gt;
다양한 주파수와 진폭, 다양한 모양의 위상. 비동기와 유사&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dsudigital-service-unit&quot;&gt;DSU(Digital Service Unit)&lt;/h2&gt;
&lt;p&gt;네트워크 간에 서로 다른 디지털 신호를 사용하기 때문에 필요한 네트워크 연결 장비(네트워크 간의 상호 보안 문제가 있기 때문)&lt;/p&gt;

&lt;p&gt;하나의 통합된 디지털 신호(Bipolar)를 사용하자는 취지에서 등장한 ISDN이 계속 발전하지 못한 이유 또한 보안 문제가 발생했기 때문이다&lt;/p&gt;

&lt;h3 id=&quot;특징&quot;&gt;특징&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;디지털 신호를 변조하지 않고 DTE를 데이터 교환망에 접속하기 위한 장비&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;먼 거리&lt;/strong&gt;까지 디지털 데이터를 전송하기 위해 사용&lt;/li&gt;
  &lt;li&gt;모뎀의 회로 구성보다 간단하고 &lt;strong&gt;속도가 빠르다&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dsu의-신호-변환-방식&quot;&gt;DSU의 신호 변환 방식&lt;/h3&gt;
&lt;h4 id=&quot;단극-rzreturn-to-zero&quot;&gt;단극 RZ(Return to Zero)&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;전압을 양극이나 음극 하나만 사용&lt;/strong&gt;하므로 단극이라고 하며 입력 데이터가 ‘1’이면 양극이나 음극 중에서 전압을 주고 ‘0’이면 전압을 주지 않는 방식&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;송수신 회로 구성이 간단하지만 &lt;strong&gt;잡음이 많아 단거리 구간&lt;/strong&gt;에 사용되며 ‘1’과 ‘0’이 &lt;strong&gt;연속되면 동기가 용이하지 않다&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;양극-nrznon-return-to-zero&quot;&gt;양극 NRZ(Non Return to Zero)&lt;/h4&gt;
&lt;p&gt;전압을 양극과 음극 모두 사용하므로 양극이라고 하며 입력 데이터가 ‘1’이면 양극, ‘0’이면 음극의 전압을 주는 방식&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;NRZ-L(Level)&lt;/strong&gt;&lt;br /&gt;
‘1’인 경우에는 양극, ‘0’인 경우에는 음극을 사용&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NRZ-M(Mark=’1’)&lt;/strong&gt;&lt;br /&gt;
비트 간격의 시점에서는 항상 천이(변화)가 발생하며&lt;br /&gt;
‘&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;‘의 경우에는 비트 간격의 중간에서 &lt;strong&gt;천이가 발생&lt;/strong&gt;하고,&lt;br /&gt;
‘0’의 경우에는 비트 간격의 중간에서 천이가 없는 방식&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NRZ-S(Space=’0’)&lt;/strong&gt;&lt;br /&gt;
비트 간격의 시점에서는 항상 천이(변화)가 발생하며&lt;br /&gt;
‘&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;‘의 경우에는 비트 간격의 중간에서 &lt;strong&gt;천이가 발생&lt;/strong&gt;하고,&lt;br /&gt;
‘1’의 경우에는 비트 간격의 중간에서 천이가 없는 방식&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NRZ-I(Inversion)&lt;/strong&gt;&lt;br /&gt;
‘0’에서 ‘1’로, ‘1’에서’ 1’로 비트가 &lt;strong&gt;변할 때만 Interval 중간&lt;/strong&gt;에서 변화가 있고,&lt;br /&gt;
‘1’에서 ‘0’으로 변하거나 ‘0’이 지속될 때는 ‘0’의 상태 &lt;strong&gt;변화 없이&lt;/strong&gt; 같은 신호 레벨로 지속&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;bipolar&quot;&gt;Bipolar&lt;/h4&gt;
&lt;p&gt;AMI(교호 반전 부호), 3원 부호, ISDN 신호 방식이며 양극, 음극, Zero를 모두 사용한다.&lt;/p&gt;

&lt;p&gt;‘0’은 Zero로 ‘1’은 양극과 음극을 &lt;strong&gt;교대로 변환&lt;/strong&gt;시키는 방식&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;직류 성분이 포함되지 않는 장점이 있지만 &lt;strong&gt;동기화의 어려움&lt;/strong&gt; 존재&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;manchester&quot;&gt;Manchester&lt;/h4&gt;
&lt;p&gt;하나의 펄스폭을 2개로 나누어 ‘1’과 ‘0’을 &lt;strong&gt;반대로 구성&lt;/strong&gt;하여 사용&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IEEE 802.3의 CSMA/CD LAN에서의 전송 부호로 사용&lt;/li&gt;
  &lt;li&gt;매 비트 구간에서는 반드시 &lt;strong&gt;한 번 이상의 신호 준위 천이가 발생&lt;/strong&gt;하므로 이를 이용하여 &lt;strong&gt;클록 신호를 추출&lt;/strong&gt;할 수 있어 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;동기화&lt;/code&gt; 능력을 가지게 된다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;codec&quot;&gt;CODEC&lt;/h2&gt;
&lt;p&gt;아날로그 데이터를 전송하기 위해서 디지털 신호로 변환시키고, 다시 디지털 신호를 아날로그로 복귀시키는 장비&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;펄스 코드 변조(PCM)&lt;/li&gt;
  &lt;li&gt;델타 변조(DM)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pcmpulse-code-modulation&quot;&gt;PCM(Pulse Code Modulation)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;점유 주파수 대역이 넓은 단점이 존재&lt;/li&gt;
  &lt;li&gt;잡음과 누화에 강하다&lt;/li&gt;
  &lt;li&gt;저질의 전송으로도 사용이 가능&lt;/li&gt;
  &lt;li&gt;광통신의 실현으로 대용량 전송 가능&lt;/li&gt;
  &lt;li&gt;IC의 저가격화에 의해 경제적&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;표본화sampling&quot;&gt;표본화(Sampling)&lt;/h3&gt;
&lt;p&gt;연속적으로 변하는 아날로그 신호를 주기적인 간격으로 표본 값을 구하는 과정(&lt;strong&gt;PAM신호를 얻는 과정&lt;/strong&gt;)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;표본화 정리(Nyquist-Shannon Sampling Theorem)&lt;br /&gt;
어떤 신호 f(t)가 의미를 지니는 최고의 주파수보다 &lt;strong&gt;2배 이상의 속도의 균일한 시간 간격으로 채집&lt;/strong&gt;된다면 이 채집된 데이터는 원래의 신호가 가진 모든 정보를 포함한다는 이론&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;양자화quantization&quot;&gt;양자화(Quantization)&lt;/h3&gt;
&lt;p&gt;표본화한 표본 값을 정수화하는 단계로 실수형의 표본 값을 &lt;strong&gt;정수가 되도록&lt;/strong&gt; 반올림을 수행한다. 이 때 발생하는 오차를 &lt;strong&gt;양자화 잡음&lt;/strong&gt;이라고 하는데, &lt;strong&gt;PCM극 장치&lt;/strong&gt;에서 발생한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;양자화 스텝&lt;/strong&gt; : 표본화 된 하나의 PAM(Pulse Amplitude Modulation) 신호를 부호화 할 때, 다음과 같은 공식이 성립한다
    &lt;blockquote&gt;
      &lt;p&gt;$M = 2^n$&lt;br /&gt;
&lt;sub&gt;M : 양자화 스탭 / n : 표본당 전송 비트 수&lt;/sub&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Companding : 압축과 신장의 합성어로 전송될 일부분의 신호가 일정한 범위 내에 있지 않고 급격한 차이가 있을 경우 급격한 일부분의 신호에 의하여 많은 스탭 수가 필요하게 된다. 이 때 사용하는 방법으로 급격한 신호를 압축하여 압축 정보와 함께 전송하면 수신측에서는 압축된 정보를 참조하여 원래로 신호로 신장하는 방법&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;부호화encoding&quot;&gt;부호화(Encoding)&lt;/h3&gt;
&lt;p&gt;양자화된 표본 펄스의 진폭 값을 디지털 신호 ‘1’과 ‘0’의 조합으로 변환하는 단계&lt;/p&gt;

&lt;p&gt;인접 부호 간 1bit만 변화시키는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gray Code&lt;/code&gt;를 가장 많이 사용&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;원천 부호화&lt;/strong&gt;(Source Coding)&lt;br /&gt;
정보 신호를 전송하기에 적합하도록 효율적으로 부호화하는 방식으로 정보 신호를 디지털 신호로 바꾸고 데이터를 압축하여 제한된 대역폭에서 고속으로 전송되도록 한다
    &lt;ul&gt;
      &lt;li&gt;DM(Delta Modulation), PCM(Pulse Code Modulation), 허프만 코딩(Huffiman Coding), LPC(Linear Predictive Coding), PNM(펄스 수 변조)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;채널 부호화&lt;/strong&gt;(Channel Coding)&lt;br /&gt;
원천 부호화된 원래의 정보에 에러 검출 및 정정을 위한 비트들을 추가하여 전송하는 방법으로 수신측에서 에러를 검사하여 데이터의 재전송을 요청하거나 자체적으로 에러를 검출하여 정정하도록 하는 목적
    &lt;ul&gt;
      &lt;li&gt;ARQ(Automatic Repeat Request), FEC(Forward Error Correction)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;복호화decoding&quot;&gt;복호화(Decoding)&lt;/h3&gt;
&lt;p&gt;수신된 디지털 신호를 &lt;strong&gt;원래의 신호로 복원&lt;/strong&gt;하는 단계. 부호를 PAM 신호로 변환&lt;/p&gt;

&lt;h3 id=&quot;여파화filtering&quot;&gt;여파화(Filtering)&lt;/h3&gt;
&lt;p&gt;인접한 PAM 신호의 정점을 연결하여 &lt;strong&gt;계단 모양의 파형으로 만들고&lt;/strong&gt; 저역 필터기를 통과시킨다. 약간의 일그러짐이 있지만 표본화되기 전 원래의 신호와 비슷하게 복원된다.&lt;/p&gt;

&lt;h2 id=&quot;pcmtdmtime-division-multiplexing&quot;&gt;PCM/TDM(Time Division Multiplexing)&lt;/h2&gt;
&lt;p&gt;PCM화된 다수의 음성 채널을 하나의 전송로를 이용하여 전송하는 방식&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;T1(DS-1) 방식 : 북미 표준&lt;/li&gt;
  &lt;li&gt;E1(DE-1) 방식 : 유럽 표준&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;아이-패턴&quot;&gt;아이 패턴&lt;/h2&gt;
&lt;p&gt;디지털 신호는 시간이 흐름에 따라 단계적인 레벨을 이동하면서 파형을 그리게 되는데 이러한 단계적인 레벨 이동의 흐름을 &lt;strong&gt;특정 시간단위 내에서 중첩하여 보여준 파형&lt;/strong&gt;이 바로 눈 패턴(Eye Pattern)이다.&lt;/p&gt;

&lt;p&gt;채널을 통과하면 아이 패턴의 모양이 변하게 되는데, 변화는 위치와 특성에 따라 여러 가지 통신 특성의 변화를 가늠해볼 수 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Optimum Sampling Time&lt;/strong&gt;&lt;br /&gt;
아이 패턴이 열린 최대 높이가 최적의 샘플링 순간&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sensitivity to Timing Error&lt;/strong&gt;&lt;br /&gt;
아이 패턴의 기울기를 통해 시간 오차에 대한 민감도를 평가&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Noise Margin&lt;/strong&gt;&lt;br /&gt;
아이 패턴이 눈이 열린 높이 만큼을 잡음에 대한 여분으로 잡을 수 있다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Maximum Distortion&lt;/strong&gt;&lt;br /&gt;
아이 패턴의 맨 위와 맨 아래의 파형들의 진동폭은 신호가 샘플링되는 순간 왜곡되는 최대값을 나타낸다&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;../../assets/images/network/data-communication/eye-pattern.png&quot; alt=&quot;&quot; class=&quot;align-center&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;출처 : http://www.rfdh.com/bas_com/1-8.htm&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Sat, 27 Mar 2021 00:00:00 +0900</pubDate>
        <link>https://many258.github.io/study/data-communication-signal-converter/</link>
        <guid isPermaLink="true">https://many258.github.io/study/data-communication-signal-converter/</guid>
        
        <category>데이터통신</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>[데이터통신] 데이터 통신 시스템의 기본</title>
        <description>&lt;h1 id=&quot;통신의-3요소&quot;&gt;통신의 3요소&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;정보원(Source)&lt;/li&gt;
  &lt;li&gt;수신원(Destination)&lt;/li&gt;
  &lt;li&gt;전송매체(Transmission Media)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;데이터-통신-시스템의-발달-과정&quot;&gt;데이터 통신 시스템의 발달 과정&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;SAGE&lt;/strong&gt;(Semi-Automatic Ground Enviroment)
    &lt;ul&gt;
      &lt;li&gt;미국의 군사용 반자동 방공 시스테믕로 사용된 &lt;strong&gt;최초의 데이터 통신&lt;/strong&gt; 시스템&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SABRE&lt;/strong&gt;(Semi-Automatic Business Research Enviroment)
    &lt;ul&gt;
      &lt;li&gt;항공기 좌석 예약 시스템으로 &lt;strong&gt;최초의 상업용&lt;/strong&gt; 통신 시스템&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CTSS&lt;/strong&gt;(Compatible Time Sharing System)
    &lt;ul&gt;
      &lt;li&gt;대학 내 대형컴퓨터 공동 이용을 목적으로 시행한 &lt;strong&gt;최초의 시분할&lt;/strong&gt; 시스템&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ARPANET&lt;/strong&gt;(Advanced Research Project Agency Network)
    &lt;ul&gt;
      &lt;li&gt;최소의 &lt;strong&gt;유선 패킷 시스템&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;인터넷 기술의 모체&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ALOHA&lt;/strong&gt;(Additive Links On-line Hawaii Area)
    &lt;ul&gt;
      &lt;li&gt;최초의 &lt;strong&gt;무선 패킷&lt;/strong&gt; 네트워크 시스템&lt;/li&gt;
      &lt;li&gt;공유 회선 점유방식 중 &lt;strong&gt;경쟁방식(CSMA, CSMA/CD)의 모체&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SNA&lt;/strong&gt;(System Network Architecture)
    &lt;ul&gt;
      &lt;li&gt;IBM 사에서 발표한 컴퓨터 간 접속 &lt;strong&gt;네트워크 시스템 표준&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;데이터-통신-시스템&quot;&gt;데이터 통신 시스템&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;데이터 전송계
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;단말장치&lt;/strong&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DTE&lt;/code&gt;: Data Terminal Equipment)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;데이터 전송 회선&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;신호 변환기&lt;/strong&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DCE&lt;/code&gt;: Data Circuit Equipment)&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;통신 회선&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;통신 제어 장치&lt;/strong&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CCU&lt;/code&gt;: Communication Control Unit)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터 처리계
    &lt;ul&gt;
      &lt;li&gt;컴퓨터
        &lt;ul&gt;
          &lt;li&gt;하드웨어&lt;/li&gt;
          &lt;li&gt;통신 소프트웨어&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;통신&lt;/code&gt; 시스템의 3대 구성요소
    &lt;ul&gt;
      &lt;li&gt;단말장치&lt;/li&gt;
      &lt;li&gt;통신 제어 장치&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;전송 장치&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;전송&lt;/code&gt; 시스템의 3대 구성요소
    &lt;ul&gt;
      &lt;li&gt;단말장치&lt;/li&gt;
      &lt;li&gt;통신 제어 장치&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;데이터 전송 회선&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;단말장치dte-data-terminal-equipment&quot;&gt;단말장치(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DTE&lt;/code&gt;: Data Terminal Equipment)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;통신 시스템과 사용자의 접점에 위치하여 데이터를 입력하거나 처리된 결과를 출력하는 기능 담당&lt;/li&gt;
  &lt;li&gt;전송 제어 기능(입출력 제어, 오류 제어, 송수신 제어) 수행&lt;/li&gt;
  &lt;li&gt;통신 회선을 통하여 송수신될 때 속도의 차이를 극복시켜 주는 임시 기억 장치의 역할&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;데이터-전송-회선&quot;&gt;데이터 전송 회선&lt;/h2&gt;
&lt;p&gt;전송 신호를 송/수신하기 위한 통로&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;전송로에 적합한 신호로 변경&lt;/li&gt;
  &lt;li&gt;데이터 송수신 시에 동기(시간 맞춤 행위)를 제어&lt;/li&gt;
  &lt;li&gt;오류를 검출하거나 정정&lt;/li&gt;
  &lt;li&gt;전송 조작 절차를 제어&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;신호-변환기dce-data-circuit-equipment&quot;&gt;신호 변환기(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DCE&lt;/code&gt;: Data Circuit Equipment)&lt;/h3&gt;
&lt;p&gt;단말장치와 통신 회선 사이에서 적합한 신호나 데이터로 변환시켜주는 장치로서 데이터 회선 종단 장치라고도 한다.&lt;br /&gt;
&lt;strong&gt;MODEM, CODEC, DSU&lt;/strong&gt;가 존재&lt;/p&gt;

&lt;h3 id=&quot;통신-회선&quot;&gt;통신 회선&lt;/h3&gt;
&lt;p&gt;데이터가 실질적으로 전송되는 선로.&lt;br /&gt;
&lt;strong&gt;꼬임선/동축케이블/광섬유 케이블&lt;/strong&gt; 등 전송 매체 존재&lt;/p&gt;

&lt;h2 id=&quot;통신-제어-장치ccu-communication-control-unit&quot;&gt;통신 제어 장치(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CCU&lt;/code&gt;: Communication Control Unit)&lt;/h2&gt;
&lt;p&gt;데이터 전송회선과 컴퓨터를 연결하는 장치. 컴퓨터가 데이터 처리에 전념할 수 있도록 컴퓨터를 대신해 데이터 전송에 관한 전반적인 제어 기능을 수행&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;통신 회선을 통하여 송수신되는 자료를 제어하고 감시&lt;/li&gt;
  &lt;li&gt;통신 회선의 전송 속도와 CPU의 처리 속도 사이에서 조정을 수행&lt;/li&gt;
  &lt;li&gt;통신 회선과 전기적으로 결합&lt;/li&gt;
  &lt;li&gt;통신 방식과 다중 접속을 제어&lt;/li&gt;
  &lt;li&gt;전송 문자 및 메시지를 조립 또는 분해&lt;/li&gt;
  &lt;li&gt;동기 제어 : 컴퓨터의 처리 속도와 통신 회선 상의 전송 속도 차이 조정&lt;/li&gt;
  &lt;li&gt;오류 제어 : 통신 회선과 단말장치에서 발생하는 오류 제어&lt;/li&gt;
  &lt;li&gt;흐름 제어 : 수신 가능한 데이터의 양을 송신측에 알려 원할한 정보 전송이 가능하도록 조정&lt;/li&gt;
  &lt;li&gt;응답 제어 : 수신 정보 확인&lt;/li&gt;
  &lt;li&gt;투과성 : 전송할 실제 데이터에 대한 비트 열에 확장 비트를 부가 또는 소거&lt;/li&gt;
  &lt;li&gt;우선권 제어&lt;/li&gt;
  &lt;li&gt;제어 정보 식별 : 일반 데이터와 제어 정보 구분&lt;/li&gt;
  &lt;li&gt;기밀 보호 : 암호화 등 제어&lt;/li&gt;
  &lt;li&gt;관리 기능 : 통신에 관한 통계 정보 수집&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 27 Mar 2021 00:00:00 +0900</pubDate>
        <link>https://many258.github.io/study/data-communication-base/</link>
        <guid isPermaLink="true">https://many258.github.io/study/data-communication-base/</guid>
        
        <category>데이터통신</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>[소프트웨어공학] 미들웨어(Middleware)</title>
        <description>&lt;h1 id=&quot;미들웨어middleware&quot;&gt;미들웨어(Middleware)&lt;/h1&gt;
&lt;p&gt;운영체제와 사용자 응용 프로그램 사이에 또는 다른 종류의 사용자 응용프로그램 사이에서 조정 및 &lt;strong&gt;중개 역할&lt;/strong&gt;을 하는 프로그램&lt;/p&gt;

&lt;h2 id=&quot;특징&quot;&gt;특징&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;두 개 이상의 응용 프로그램 간 데이터를 공유시킨다&lt;/li&gt;
  &lt;li&gt;표준화된 인터페이스 제공 가능&lt;/li&gt;
  &lt;li&gt;서버와 클라이언트 사이에서 작업량의 감소, 부하 분산, 트랜잭션 처리, 보안 등 역할을 담당&lt;/li&gt;
  &lt;li&gt;분산된 업무를 동시에 처리 가능하여 자료의 일관성 유지&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;종류&quot;&gt;종류&lt;/h2&gt;
&lt;h3 id=&quot;rpcremote-procedure-call--원격-프로시져-호출&quot;&gt;RPC(Remote Procedure Call) : 원격 프로시져 호출&lt;/h3&gt;
&lt;p&gt;원격 프로시져를 마치 로컬 프로시져처럼 호출하는 방식의 미들웨어&lt;/p&gt;

&lt;p&gt;한 프로그램이 네트워크 상의 다른 컴퓨터에 위치하고 있는 프로그램에 서비스를 요청하는데 사용되는 프로토콜로서, 이때 서비스를 요청하는 프로그램은 네트워크에 대한 상세 내용을 알 필요가 없다&lt;/p&gt;

&lt;p&gt;제품 종류 : Entera(이큐브시스템), ONC/RPC(OSF)&lt;/p&gt;

&lt;h3 id=&quot;mommessage-oriented-middleware--메시지-지향-미들웨어&quot;&gt;MOM(Message Oriented Middleware) : 메시지 지향 미들웨어&lt;/h3&gt;
&lt;p&gt;주로 &lt;strong&gt;비동기형 메시지 처리를 전달&lt;/strong&gt;하는 미들웨어.&lt;br /&gt;
이 기종 분산 데이터 시스템의 데이터 동기를 위해 주로 사용&lt;br /&gt;
제품 종류 : MQ(IBM), Message Q(Oracle), JMS(JCP)&lt;/p&gt;

&lt;h3 id=&quot;tp-모니터&quot;&gt;TP-모니터&lt;/h3&gt;
&lt;p&gt;온라인 트랜잭션 업무에서 트랜잭션을 처리, 감시하는 미들웨어.&lt;br /&gt;
사용자 수가 증가하여도 빠른 응답속도를 유지해야 하는 OLTP성의 업무에 적합
제품 종류 : Tuxedo(Oracle), Tmax(Tmax Soft)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;OLTP&lt;/strong&gt;(Online Transaction Processing)&lt;br /&gt;
네트워크 상의 여러 이용자가 실시간으로 데이터베이스의 데이터를 갱신하거나 조회하는 등의 단위 작업을 처리하는 방식&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;OLAP&lt;/strong&gt;(Online Analytical Processing)&lt;br /&gt;
사용자가 다양한 각도에서 직접 대화식으로 정보를 분석하는 과정.&lt;br /&gt;
데이터웨어하우스 등의 시스템과 연관되어 자료를 분석하고 의미있는 정보로 치환하거나, 복잡한 모델링을 가능하게끔 하는 분석 방법&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;corbacommon-object-request-broker-architecture&quot;&gt;CORBA(Common Object Request Broker Architecture)&lt;/h3&gt;
&lt;p&gt;네트워크에서 분산 프로그램 객체를 생성, 배포, 관리하기 위한 규격으로 네트워크 상의 서로 다른 장소에 있는 프로그램들이 “인터페이스 브로커”를 통해 통신이 가능하도록 해준다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;OMG&lt;/strong&gt;(Object Management Group)&lt;br /&gt;
여러 대의 컴퓨터를 연결하여 사용하는 환경하에서 응용 프로그램 간에 기술적인 문제를 지원하고 표준을 위해 설립된 비영리 단체.&lt;br /&gt;
분산 네트워크 시스템에서 하드웨어나 운영체제에 영향을 받지 않고 응용 프로그램을 통합할 수 있는 공통된 작업 환경을 제공한다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;OMA&lt;/strong&gt;(Object Management Architecture)&lt;br /&gt;
OMG의 활동 방향과 목적에 부합되는 모델로서 ORB, 객체 서비스, 공통 기능, 응용 인터페이스, 도메인 인터페이스 등으로 구성&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ORB&lt;/strong&gt;(Object Request Broker)&lt;br /&gt;
객체지향 시스템에서 객체 및 서비스를 요청하고 전송할 수 있도록 지원하는 미들웨어로 CORBA 표준 스펙을 구현한 미들웨어&lt;br /&gt;
제품 종류 : Orbix(Micro Focus), CORBA(OMG)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;comcomponent-object-model&quot;&gt;COM(Component Object Model)&lt;/h3&gt;
&lt;p&gt;MS사가 개발한 객체 응용 프로그램 간의 통신 방식으로 응용 프로그램의 컴포넌트 객체들을 개발하고 지원하기 위한 미들웨어.&lt;/p&gt;

&lt;p&gt;모든 기능을 여러 개의 &lt;strong&gt;단위 프로그램으로 분할&lt;/strong&gt;함으로써
코드의 재사용성을 극대화하고 효율적인 유지보수를 보장한다. 단위 소프트웨어, 컴포넌트들을 재사용하기 위해서는 &lt;strong&gt;표준화된 방법&lt;/strong&gt;이 필요했는데 단위 소프트웨어,컴포넌트들이 서로 통신할 수 있게 마이크로소프트가 표준화를 규정하였다.&lt;/p&gt;

&lt;p&gt;객체를 재사용하는 개념이 없기 때문에 객체지향의 이점은 누릴 수 없지만 다양한 응용 프로그램을 관리하는 면에서는 CORBA보다 우월&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;IPC&lt;/strong&gt;(Inter Process Communication)&lt;br /&gt;
두 프로세스가 상호 통신하며 정보를 교환하는 방법&lt;/p&gt;

    &lt;p&gt;멀티태스킹 환경에서는 여러가지 프로그램들이 동시에 실행된다. 각 프로세스들은 메모리와 CPU를 공유하고 있을 뿐, 독립된 일을 하며 상호 간섭하지 않고 간섭할 수도 없다. 하지만 필요에 따라 프로세스간의 정보를 교환해야 하는 경우가 생기는데 이 때 사용한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dcomdistributed-component-object-model&quot;&gt;DCOM(Distributed Component Object Model)&lt;/h3&gt;
&lt;p&gt;인터넷이나 LAN환경에서 서로 다른 컴퓨터끼리의 통신을 지원하는 분산확장형 COM&lt;/p&gt;

&lt;p&gt;사용자 응용 프로그램 객체는 파일 이름 대신에 URL을 사용하여 서버 객체를 사용할 수 있으므로 인터넷에서 분산 처리를 실현할 수 있다&lt;/p&gt;

&lt;h3 id=&quot;comcomponent-object-model-1&quot;&gt;COM+(Component Object Model+)&lt;/h3&gt;
&lt;p&gt;분산형 트랜잭션을 동시 처리할 목적으로 출현&lt;/p&gt;

&lt;p&gt;COM/DCOM과 약간 다른 개념으로 MTS라고 불리는 일종에 서비스.&lt;br /&gt;
쉽게 말하자면 COM을 네트워크에서 사용가능하도록 해주는 서비스&lt;/p&gt;

&lt;h3 id=&quot;wasweb-application-server--웹-애플리케이션-서버&quot;&gt;WAS(Web Application Server) : 웹 애플리케이션 서버&lt;/h3&gt;
&lt;p&gt;정적인 콘텐츠를 처리하는 웹 서버와 달리 사용자의 요구에 따라 변하는 동적인 콘텐츠를 처리하기 위해 사용되는 미들웨어&lt;br /&gt;
종류 : 아파치 톰캣(Apache Tomcat), JBoss, Jetty, WebLogic, JRun, Jeus, WebSphere&lt;/p&gt;

&lt;h3 id=&quot;esbenterprise-service-bus--엔터프라이즈-서비스-버스&quot;&gt;ESB(Enterprise Service Bus) : 엔터프라이즈 서비스 버스&lt;/h3&gt;
&lt;p&gt;메시지 기반으로 느슨한 결합형태의 표준 인터페이스 통신을 통해 전사 시스템 환경을 연동하는 미들웨어&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SOA에서 사용되는 개념&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;EAI와 유사하게 사용된다. 기관 간, 서비스 간 연계가 이루어진다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;SOA&lt;/strong&gt;(서비스 지향 아키텍쳐 : Service Oritented Architecture)&lt;br /&gt;
대규모 컴퓨터 시스템을 구축할 때의 개념으로 업무상에 일 처리에 해당하는 소프트웨어 기능을 서비스로 판단하여 그 서비스를 네트워크 상에 연동하여 시스템 전체를 구축해 나가는 방법론&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;EAI&lt;/strong&gt;(기업 응용 프로그램 통합 : Enterprise Application Integration)&lt;br /&gt;
DW, ERP, CRM, SCM, B2B 등 기업에서 운영하는 서로 다른 어플리케이션 및 시스템을 통합시키는 것을 의미.&lt;br /&gt;
업무의 효율성, 확장성 향상, 유지보수 및 비용 절감, 편의성 증대시키는 솔루션&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 26 Mar 2021 00:00:00 +0900</pubDate>
        <link>https://many258.github.io/study/software-engineering-middleware/</link>
        <guid isPermaLink="true">https://many258.github.io/study/software-engineering-middleware/</guid>
        
        <category>SW Engineering</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>[소프트웨어공학] 소프트웨어 검사</title>
        <description>&lt;h1 id=&quot;검사-관련-용어정의&quot;&gt;검사 관련 용어정의&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;검사&lt;/strong&gt;(Testing)&lt;br /&gt;
오류를 찾는 작업&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;검증&lt;/strong&gt;(Verification)&lt;br /&gt;
개발된 소프트웨어와 사용자의 요구분석 명세서와의 차이를 확인하는 작업&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;디버깅&lt;/strong&gt;(Debugging)&lt;br /&gt;
검사로 찾아낸 오류를 수정하는 작업&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;검토 회의&lt;/strong&gt;(Walk-through)&lt;br /&gt;
소프트웨어 생명주기의 단계마다 산출된 명세서를 가지고 다음 단계로 넘어가기 전에 오류를 찾아내는 작업&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;정형 기술 검토&lt;/strong&gt;(FTR)&lt;br /&gt;
소프트웨어에 관련된 여러 사람이 모여 회의하는 정형화된 오류 검토 회의&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;검사방법&quot;&gt;검사방법&lt;/h1&gt;
&lt;h2 id=&quot;화이트-박스-검사&quot;&gt;화이트 박스 검사&lt;/h2&gt;
&lt;p&gt;상자 안을 들여다 볼 수 있다는 뜻으로 &lt;strong&gt;원시 프로그램을 직접 보면서&lt;/strong&gt; 프로그램 상 허용되는 논리적인 모든 경로를 직접 검사하는 방법&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프로그램 모듈의 논리적 구조를 체계적으로 점검하는 구조 검사&lt;/li&gt;
  &lt;li&gt;원시 코드의 모든 문장을 &lt;strong&gt;한 번 이상 수행함&lt;/strong&gt;으로써 진행되는 구조 검사&lt;/li&gt;
  &lt;li&gt;검사 대상의 가능한 경로를 어느 정도 통과하는 지의 적용 범위성을 측정 기준으로 한다&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;프로그램의 제어 구조에 따라 &lt;strong&gt;선택, 반복 등의 부분들을 수행&lt;/strong&gt;함으로써 논리적인 경로를 검사&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;종류
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;기초 경로 검사&lt;/strong&gt;(Basic Path Testing)&lt;br /&gt;
모든 논리적인 경로를 복잡도로 계산하여 구한 후 경로를 수행할 수 있는 검사 경우를 직접 입력하여 오류를 검출하는 방법
        &lt;blockquote&gt;
          &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;오일러의 공식&lt;/code&gt; : V - E + R = 2&lt;br /&gt;
&lt;sub&gt;V: 노드의 수, E: 간선의 수, R:영역의 수&lt;/sub&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;루프 검사&lt;/strong&gt;(Loop Testing)&lt;br /&gt;
반복문 관련 오류 검출&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;데이터 흐름 검사&lt;/strong&gt;(Data Flow Testing)&lt;br /&gt;
제어 흐름 그래프에 데이터 사용 현황(정의, 소멸, 사용)을 테스트&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;조건 검사&lt;/strong&gt;(Condition Testing)&lt;br /&gt;
조건문 관련 오류 검출&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;찾을 수 있는 오류
    &lt;ul&gt;
      &lt;li&gt;자세하고 세부적 오류 검출 가능&lt;/li&gt;
      &lt;li&gt;반복문, 참거짓을 판단할 수 있는 논리 구조 상의 오류 검출 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;블랙-박스-검사&quot;&gt;블랙 박스 검사&lt;/h2&gt;
&lt;p&gt;상자 안을 볼 수 없다는 뜻으로 원시 프로그램은 보지 않고 프로그램만 실행시켜 데이터 입력에 대한 결과만을 보고 오류를 판단하는 방법&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;종류
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;균등 분할&lt;/strong&gt;(Equivalence Partitioning)&lt;br /&gt;
입력 자료에 초점을 맞춰 검사 사례를 만드는 방법.&lt;br /&gt;
타당한 자료와 타당하지 않은 자료의 개수를 균등하게 하여 정함&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;한계값 분석&lt;/strong&gt;(Boundary Value Analysis)&lt;br /&gt;
입력조건의 중간값에서 보다 &lt;strong&gt;경계값에서 에러가 발생될 확률이 높다&lt;/strong&gt;는 점을 이용하여 이를 실행하는 테스크 케이스를 만드는 방법&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;원인-결과 그래프&lt;/strong&gt;(Cause-Effect Graphing)&lt;br /&gt;
입력 데이터 간의 관계가 출력에 미치는 영향을 그래프로 표현하여 오류 검출&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;오류 예측&lt;/strong&gt;(Error Guessing)&lt;br /&gt;
각 시험기법들이 놓치기 쉬운 오류들을 감각 및 경험으로 찾아보는 것&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;비교 검사&lt;/strong&gt;(Comparison Testing)&lt;br /&gt;
여러 버전의 프로그램에 동일한 검사 자료를 제공하여 동일한 결과가 출력되는 지 비교 및 확인하는 검사&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;페어 와이즈 조합 테스트&lt;/strong&gt;&lt;br /&gt;
모든 가능한 입력 값들의 조합들을 테스트하는 대신에 모든 Pair의 조합을 테스트하는 방법&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;상태 전이 검사&lt;/strong&gt;&lt;br /&gt;
시스템의 상태가 변화함에 따른 검사&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;비정상적인 자료를 입력해도 오류 처리를 수행하지 않은 경우의 오류 검출 가능&lt;/li&gt;
  &lt;li&gt;정상적인 자료를 입력해도 요구된 기능이 제대로 수행되지 않는 경우의 오류를 검출 가능&lt;/li&gt;
  &lt;li&gt;성능 오류, 자료 구조 상의 오류, 인터페이스, 시작과 종결 상의 오류를 찾을 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;검사-순서&quot;&gt;검사 순서&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;단위(코드) 검사&lt;/li&gt;
  &lt;li&gt;통합(설계) 검사&lt;/li&gt;
  &lt;li&gt;검증(요구사항) 검사&lt;/li&gt;
  &lt;li&gt;시스템 검사&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;단위-검사&quot;&gt;단위 검사&lt;/h2&gt;
&lt;p&gt;원시 프로그램의 모듈을 대상으로 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;화이트 검사&lt;/code&gt;를 실시&lt;/strong&gt;하는 방법&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;인터페이스 검사&lt;/li&gt;
  &lt;li&gt;자료 구조 검사&lt;/li&gt;
  &lt;li&gt;경로 검사&lt;/li&gt;
  &lt;li&gt;오류 처리 검사&lt;/li&gt;
  &lt;li&gt;한계값 검사&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;통합-검사&quot;&gt;통합 검사&lt;/h2&gt;
&lt;p&gt;단위 검사를 성공적으로 실시한 후에 단위별로 &lt;strong&gt;결합하면서 오류를 검출&lt;/strong&gt;하는 방법&lt;/p&gt;

&lt;h3 id=&quot;하향식top-down-통합-검사&quot;&gt;하향식(Top-Down) 통합 검사&lt;/h3&gt;
&lt;p&gt;상위 모듈에서 하위 모듈로 결합하면서 오류를 찾는 방법으로 가짜 모듈(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stub&lt;/code&gt;)이 필요하다&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;전체 프로그램을 매번 실행하고 종속적인 모듈은 &lt;strong&gt;가짜 모듈(Stub)로 대치&lt;/strong&gt;한다&lt;/li&gt;
  &lt;li&gt;통합 방법에 따라 가짜 모듈을 &lt;strong&gt;실제 모듈로 대치&lt;/strong&gt;한다&lt;/li&gt;
  &lt;li&gt;각 모듈이 &lt;strong&gt;통합되면 검사&lt;/strong&gt;를 실시&lt;/li&gt;
  &lt;li&gt;통합될 때마다 &lt;strong&gt;회귀 검사&lt;/strong&gt;를 실시&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;프로그램 전체를 실행하면서 검사 가능&lt;/li&gt;
  &lt;li&gt;중요 모듈을 우선 검사할 때에는 부적합&lt;/li&gt;
  &lt;li&gt;독립적인 구조로 검사할 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;상향식bottom-up-통합-검사&quot;&gt;상향식(Bottom-Up) 통합 검사&lt;/h3&gt;
&lt;p&gt;최하위의 모듈부터 상위로 진행하면서 통합하는 방식으로 가짜 모듈은 필요없지만 통합 시에 통합된 클러스터(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cluster&lt;/code&gt;)를 실행할 수 있는 시험 가동기(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Driver&lt;/code&gt;)가 필요하다&lt;/p&gt;

&lt;p&gt;&lt;sub&gt;
클러스터 : 여러 개의 모듈을 하나로 묶어 놓은 단위&lt;br /&gt;
드라이버 : 임시로 실행시켜 검사해 보기 위한 임시 프로그램 모듈
&lt;/sub&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;낮은 수준의 모듈들을 클러스터로 &lt;strong&gt;결합&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;검사 사례 입/출력을 조정하기 위해 &lt;strong&gt;드라이버&lt;/strong&gt; 작성&lt;/li&gt;
  &lt;li&gt;클러스터 &lt;strong&gt;검사&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;드라이버 제거하고 클러스터를 &lt;strong&gt;상위&lt;/strong&gt;로 결합&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;중요 모듈을 우선 검사할 때 유리&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;혼합식mixed-통합-검사&quot;&gt;혼합식(Mixed) 통합 검사&lt;/h3&gt;
&lt;p&gt;하위 수준에서는 상향식 통합, 상위 수준에서는 하향식 통합을 사용하여 검사하는 방법. &lt;strong&gt;샌드위치식 통합 방식&lt;/strong&gt;이라고도 한다.&lt;/p&gt;

&lt;h2 id=&quot;검증-검사&quot;&gt;검증 검사&lt;/h2&gt;
&lt;p&gt;소프트웨어가 사용자의 &lt;strong&gt;요구사항을 충족시키는가&lt;/strong&gt;에 중점을 두고 검사하는 방법. 요구사항 명세서를 토대로 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;블랙 박스 테스트&lt;/code&gt;를 사용&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;형상 검사&lt;/strong&gt; : 소프트웨어 구성요소, 목록, 유지보수를 지원하기 위해 필요한 사항 표현 검사&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;알파 검사&lt;/strong&gt; : 개발자의 장소에서 사용자가 개발자 앞에서 실행하는 검사&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;베타 검사&lt;/strong&gt; : 다수의 사용자를 제한되지 않은 환경에서 프로그램을 사용하게 하고 오류가 발견되면 개발자에게 통보하는 방식&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;시스템-검사&quot;&gt;시스템 검사&lt;/h2&gt;
&lt;p&gt;개발된 소프트웨어가 해당 컴퓨터 시스템에서 완벽하게 수행되는가를 검사&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;확인 검사 : 이해관계가 있는 모든 사람이 참석하여 오류 검출하는 방법&lt;/li&gt;
  &lt;li&gt;보안 검사&lt;/li&gt;
  &lt;li&gt;무결성 검사&lt;/li&gt;
  &lt;li&gt;스트레스 검사&lt;/li&gt;
  &lt;li&gt;부피 검사&lt;/li&gt;
  &lt;li&gt;메모리 검사&lt;/li&gt;
  &lt;li&gt;성능 검사&lt;/li&gt;
  &lt;li&gt;호환성 검사&lt;/li&gt;
  &lt;li&gt;신뢰성 검사&lt;/li&gt;
  &lt;li&gt;회복 검사&lt;/li&gt;
  &lt;li&gt;사용 용이성 검사&lt;/li&gt;
  &lt;li&gt;유지보수 용이성 검사&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;정형-기술-검토ftr--formal-technical-review&quot;&gt;정형 기술 검토(FTR : Formal Technical Review)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;목적
    &lt;ul&gt;
      &lt;li&gt;소프트웨어가 요구사항에 일치되는 정도를 확인&lt;/li&gt;
      &lt;li&gt;소프트웨어가 &lt;strong&gt;표준화되었는지 검토&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;정형화된 소프트웨어가 개발되도록 지원&lt;/li&gt;
      &lt;li&gt;프로젝트 관리&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;검토 지침
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;제품 검토의 집중성&lt;/strong&gt; : 수정이 아닌 제품의 검토에 집중&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;사전 준비성&lt;/strong&gt; : 검토를 위한 자료를 사전에 배포하여 검토&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;의제의 제한성&lt;/strong&gt; : 의견을 제한하되 충분히 받아들인다&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;안건 고수성&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;논쟁 반박의 제한성&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;문제 공개성&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;참가 인원의 제한성&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;문서성&lt;/strong&gt; : 발견된 오류는 문서화한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;오류-증폭-모형&quot;&gt;오류 증폭 모형&lt;/h2&gt;
&lt;p&gt;소프트웨어 개발 생명주기 중 검사 단계에서 오류를 찾는 것보다 &lt;strong&gt;생명주기의 단계마다 확인하고 검사&lt;/strong&gt;하면 많은 양의 오류 검출 및 수정이 가능하다.&lt;/p&gt;

&lt;p&gt;이러한 방법을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;검토 회의&lt;/code&gt;(Walk-through)라고 하며 검토 회의를 할 경우에 예측할 수 있는 &lt;strong&gt;오류 감소 비율을 이론적으로 정립한 것&lt;/strong&gt;을 &lt;strong&gt;오류 증폭 모델&lt;/strong&gt;이라 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(전달된 오류수 + 오류 증폭수 + 생성된 오류수) X (100% - 오류 제거 비율)&lt;br /&gt;
오류 증폭수 = (이전 단계에서 전달된 오류수 - 전달된 오류 수) X 오류 증폭 비율&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 25 Mar 2021 00:00:00 +0900</pubDate>
        <link>https://many258.github.io/study/software-engineering-testing/</link>
        <guid isPermaLink="true">https://many258.github.io/study/software-engineering-testing/</guid>
        
        <category>SW Engineering</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>[소프트웨어공학] 소프트웨어 유지보수</title>
        <description>&lt;h1 id=&quot;소프트웨어-유지보수&quot;&gt;소프트웨어 유지보수&lt;/h1&gt;
&lt;p&gt;소프트웨어가 사용자에게 인수, 설치된 이후에 발생하는 모든 공학적인 작업 활동을 의미&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;소프트웨어 비용 중 &lt;strong&gt;유지보수 비용이 가장 큰 비중&lt;/strong&gt;을 차지&lt;/li&gt;
  &lt;li&gt;명세서의 유지보수란 명세서를 항상 최신의 상태로 만드는 것을 의미&lt;/li&gt;
  &lt;li&gt;소프트웨어는 계속 수정, 보완되기 때문에 명세서도 따라서 보완되지 않으면 일관성을 유지하기 어려움&lt;/li&gt;
  &lt;li&gt;소프트웨어 유지보수의 과정은 유지보수 요구, 현 시스템에 대한 이해, 수정 및 시험순으로 반복하여 일어남&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;문서화documentation&quot;&gt;문서화(Documentation)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;유지보수와 시스템 개발을 위한 분석 설계가 용이하고, 확장성이 좋다&lt;/li&gt;
  &lt;li&gt;여러 사람이 알아보기 쉽고, 유지보수 작업이 용이하려면 문서화 작업이 표준화되어야 한다&lt;/li&gt;
  &lt;li&gt;문서의 표준화가 되었다고 해서 신뢰성이 높아지거나 &lt;strong&gt;프로그램 처리 속도가 향상되거나 개발 인력이 감소하는 것은 아니다&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;유지보수-작업의-종류&quot;&gt;유지보수 작업의 종류&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;수리보수&lt;/strong&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Corrective&lt;/code&gt; Maintenance, 수정보수)
    &lt;ul&gt;
      &lt;li&gt;밝혀지지 않은 모든 잠재적인 오류를 찾아 수정하는 활동&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;완전보수&lt;/strong&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Perfective&lt;/code&gt; Maintenance, 기능개선/향상보수)
    &lt;ul&gt;
      &lt;li&gt;기능의 수정, 새 기능의 추가, 전반적인 기능 개선 등&lt;/li&gt;
      &lt;li&gt;유지보수 유형 중 제일 많은 비용이 소요&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;적응보수&lt;/strong&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Adaptive&lt;/code&gt; Maintenance, 환경적응)
    &lt;ul&gt;
      &lt;li&gt;환경 변화에 대응하여 소프트웨어를 변경하는 경우&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;예방보수&lt;/strong&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Preventive&lt;/code&gt; Maintenance, 예비조치)
    &lt;ul&gt;
      &lt;li&gt;프로그램의 변경을 미리 예측하여 준비하는 활동&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;유지보수-비용-측정-방법&quot;&gt;유지보수 비용 측정 방법&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;BL(Belady와 Lehman) 방법&lt;/strong&gt;
    &lt;blockquote&gt;
      &lt;p&gt;M=$P+K\cdot e^{(c-d)}$&lt;br /&gt;
&lt;sub&gt;M:유지보수를 위한 노력(인원/월)&lt;/sub&gt;&lt;br /&gt;
&lt;sub&gt;P:생산적인 활동에 드는 비용(개발 비용)&lt;/sub&gt;&lt;br /&gt;
&lt;sub&gt;K:통계값에 구한 상수(주관적평가)&lt;/sub&gt;&lt;br /&gt;
&lt;sub&gt;c:복잡도&lt;/sub&gt;&lt;br /&gt;
&lt;sub&gt;d:소프트웨어에 대한 지식 정도&lt;/sub&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;COCOMO 방법&lt;/strong&gt;
    &lt;blockquote&gt;
      &lt;p&gt;M = $ACT \times DE \times EAF$&lt;br /&gt;
&lt;sub&gt;ACT:유지보수 비율&lt;/sub&gt;&lt;br /&gt;
&lt;sub&gt;DE:생산적인 활동에 드는 비용(개발 비용)&lt;/sub&gt;&lt;br /&gt;
&lt;sub&gt;EAF:노력 조정 수치(주관적 평가)&lt;/sub&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Vessey &amp;amp; Webber 방법&lt;/strong&gt;
    &lt;blockquote&gt;
      &lt;p&gt;M = $ACT \times 2.4 \times [KDSI]^{1.05}$&lt;br /&gt;
&lt;sub&gt;M:생산적인 활동에 드는 비용(개발 비용)&lt;/sub&gt;&lt;br /&gt;
&lt;sub&gt;ACT:유지보수 비율&lt;/sub&gt;&lt;br /&gt;
&lt;sub&gt;KDSI:1000당 명령어 라인 수&lt;/sub&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;소프트웨어-품질-목표-항목&quot;&gt;소프트웨어 품질 목표 항목&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;정확성&lt;/li&gt;
  &lt;li&gt;신뢰성&lt;/li&gt;
  &lt;li&gt;효율성&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;무결성&lt;/strong&gt; : 허용하지 않은 사용이나 자료의 변경을 제어하는 정도&lt;/li&gt;
  &lt;li&gt;유지보수 용이성&lt;/li&gt;
  &lt;li&gt;사용 용이성&lt;/li&gt;
  &lt;li&gt;검사 용이성&lt;/li&gt;
  &lt;li&gt;이식성&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;상호 운용성&lt;/strong&gt; : 다른 소프트웨어와 정보를 교환할 수 있는 정도&lt;/li&gt;
  &lt;li&gt;유연성 : 소프트웨어 품질 목표 중 새로운 요구사항에 접하여 쉽게 수정될 수 있는 시스템 능력을 요구하는 것의 정도&lt;/li&gt;
  &lt;li&gt;재사용성&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;소프트웨어-신뢰성&quot;&gt;소프트웨어 신뢰성&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;신뢰성&lt;/strong&gt;(Reliability) : 주어진 시간 동안 주어진 환경에서 프로그램이 &lt;strong&gt;고장 없이 운영될 확률&lt;/strong&gt;을 의미&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;가용성&lt;/strong&gt;(Availability) : 프로그램이 주어진 시점에서 요구사항을 수행하는 확률&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;평균 사용 시간&lt;/strong&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MTBF&lt;/code&gt; : Mean Time Between Failures)&lt;br /&gt;
고장 수리가 끝난 시간부터 다음 고장이 발생할 때까지의 시간 평균치
    &lt;blockquote&gt;
      &lt;p&gt;$\frac{(사용1 + 사용2 + … + 사용n)}{n}$&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;평균 수리 시간&lt;/strong&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MTTR&lt;/code&gt; : Mean Time to Repair)&lt;br /&gt;
고장이 일어난 시점부터 고장 수리가 완료되는 시점까지의 평균치
    &lt;blockquote&gt;
      &lt;p&gt;$\frac{(고장1 + 고장2 + … + 고장n)}{n}$&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;평균 고장 시간&lt;/strong&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MTTF&lt;/code&gt; : Mean Time To Failures)&lt;br /&gt;
고장이 발생한 시점부터 다음 고장이 발생할 때까지의 평균치
    &lt;blockquote&gt;
      &lt;p&gt;MTBF + MTTR&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;가용도&lt;/strong&gt; : 전체 시간 중에서 설계 가동하여 사용 중인 시간을 의미
    &lt;blockquote&gt;
      &lt;p&gt;$\frac{MTBF}{MTTF}$ = $\frac{MTBF}{MTBF+MTTR}$&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;소프트웨어-재사용sw-reuse&quot;&gt;소프트웨어 재사용(S/W Reuse)&lt;/h1&gt;
&lt;p&gt;이미 개발된 소프트웨어를 반복 사용하여 생산성을 향상시키는 방법&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;생성 중심&lt;/strong&gt;(Generation Based, 모듈화)&lt;br /&gt;
재사용 단위를 찾아 발전시키는 기술&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;합성 중심&lt;/strong&gt;(Composition Based, 모듈화)&lt;br /&gt;
모듈을 생산성있게 조립하는 기술&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;특징
    &lt;ul&gt;
      &lt;li&gt;모듈의 크기는 작을수록 재사용 비율이 높다&lt;/li&gt;
      &lt;li&gt;개발시간과 비용을 단축&lt;/li&gt;
      &lt;li&gt;개발 지식을 공유할 수 있다&lt;/li&gt;
      &lt;li&gt;소프트웨어 품질과 생산성을 향상&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;소프트웨어-재공학sw-re-engineering&quot;&gt;소프트웨어 재공학(S/W Re-Engineering)&lt;/h1&gt;
&lt;p&gt;과거에 사용하던 소프트웨어를 수명 연장을 위해 효과적으로 사용할 수 있도록 접근하는 기술&lt;/p&gt;

&lt;h2 id=&quot;출현-배경&quot;&gt;출현 배경&lt;/h2&gt;
&lt;p&gt;소프트웨어의 위기를 개발의 생산성이 아닌 &lt;strong&gt;유지보수의 생산성&lt;/strong&gt;으로 해결하기 위해 출현&lt;/p&gt;

&lt;p&gt;문서화 하는 과정에서 소프트웨어의 문제점들이 발견되고 이런 문제점을 수정 보완하여 다시금 소프트웨어를 수정하게 된 것이 재공학이 출현된 배경이다&lt;/p&gt;

&lt;p&gt;이미 개발된 소프트웨어를 보고 문서화했으므로 역으로 진행했다하여 역공학의 개념이 출현하였고, 재공학은 역공학 이후에 출현된 기술 개념&lt;/p&gt;

&lt;h2 id=&quot;정의&quot;&gt;정의&lt;/h2&gt;
&lt;p&gt;기존의 있던 소프트웨어를 &lt;strong&gt;파기하지 않고&lt;/strong&gt; 변경된 사용자의 요구사항이나 수정된 환경으로 &lt;strong&gt;기존 소프트웨어를 수정&lt;/strong&gt;, 보완하여 재구축하는 기술&lt;/p&gt;

&lt;p&gt;노후된 시스템에 대한 재분석/문서화 작업을 통해 공학적으로 우수한 시스템을 만드는 것을 의미&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;재구조화&lt;/strong&gt;(Restructuring) : 재공학의 한 유형으로 사용자의 요구사항이나 기술적인 변경 없이 프로그램을 개선&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;역공학&lt;/strong&gt;(Reverse Engineering) : 기존 소프트웨어를 분석하여 소프트웨어 개발 과정과 데이터 처리 과정을 설명하는 &lt;strong&gt;분석 및 설계 정보를 재발견&lt;/strong&gt;하거나 다시 만들어 내는 작업.&lt;br /&gt;
원시 프로그램으로부터 데이터, 아키텍처, 절차에 관한 분석 및 설계 정보를 추출하는 기술&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;코드&lt;/strong&gt;의 역공학 : 소스 코드로부터 &lt;strong&gt;자료 흐름도&lt;/strong&gt;를 추출하고 분석하여 변경&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;데이터&lt;/strong&gt;의 역공학 : 소스 코드로부터 &lt;strong&gt;자료 사전&lt;/strong&gt;을 추출하고 분석하여 변경&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;특징&quot;&gt;특징&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;재공학은 유지보수 중 &lt;strong&gt;예비 조치&lt;/strong&gt;(Preventive)의 문제를 해결하기 위한 학문이다&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;자동화된 도구&lt;/strong&gt;를 사용하여 소프트웨어를 분석하고 수정하는 과정을 포함&lt;/li&gt;
  &lt;li&gt;재공학 활동은 분석, 재구성, 역공학, 이식 활동 등으로 구분&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;목표&quot;&gt;목표&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;유지보수성, 생산성, 품질&lt;/strong&gt;의 향상이 목적&lt;/li&gt;
  &lt;li&gt;소프트웨어 사용 기간을 연장시키고 비용을 감소시킨다&lt;/li&gt;
  &lt;li&gt;고수준의 추상을 합성할 수 있다&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 25 Mar 2021 00:00:00 +0900</pubDate>
        <link>https://many258.github.io/study/software-engineering-maintenance/</link>
        <guid isPermaLink="true">https://many258.github.io/study/software-engineering-maintenance/</guid>
        
        <category>SW Engineering</category>
        
        
        <category>study</category>
        
      </item>
    
  </channel>
</rss>
