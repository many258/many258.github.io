<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://many258.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://many258.github.io//" rel="alternate" type="text/html" /><updated>2021-01-27T21:09:18+09:00</updated><id>https://many258.github.io//feed.xml</id><title type="html">My expression</title><subtitle>My expression</subtitle><author><name>SG Yoo.</name><email>many258@naver.com</email></author><entry><title type="html">[(구)정처기/컴퓨터일반] (5) 데이터통신 자주 틀리는 내용 정리</title><link href="https://many258.github.io//study/data-communication/" rel="alternate" type="text/html" title="[(구)정처기/컴퓨터일반] (5) 데이터통신 자주 틀리는 내용 정리" /><published>2021-01-27T00:00:00+09:00</published><updated>2021-01-27T19:37:34+09:00</updated><id>https://many258.github.io//study/%7Bdata-communication%7D</id><content type="html" xml:base="https://many258.github.io//study/data-communication/">&lt;p class=&quot;notice--warning&quot;&gt;&lt;span style=&quot;color:red;font-weight:bold;&quot;&gt;주의)&lt;/span&gt;
해당 내용은 (구)정보처리기사, 컴퓨터일반 내용을 기반으로 문서화하였습니다.
수정이 필요하거나, 부족한 내용이 있을시 답글을 남겨주시면 해당 항목을 수정하겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;네트워크-서비스&quot;&gt;네트워크 서비스&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;여러 개의 컴퓨터를 연결하여 각각에 연결된 컴퓨터의 하드웨어 자원과 소프트웨어 자원을 공유, 데이터나 파일을 공유&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;데이터-통신-시스템의-발전&quot;&gt;데이터 통신 시스템의 발전&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;SAGE : 미국의 군사용 방공 시스템, 최초의 데이터 통신 시스템&lt;/li&gt;
  &lt;li&gt;SABRE : 항공기 좌석 예약 시스템, 상업용&lt;/li&gt;
  &lt;li&gt;ARPANET : 최초의 유선 패킷 시스템, 인터넷 기술의 모체&lt;/li&gt;
  &lt;li&gt;ALOHA : 최초의 무선(라디오) 패킷 네트워크 시스템, CSMA, CSMA/CD의 모체&lt;/li&gt;
  &lt;li&gt;CTSS : 최초의 학내 시스템, 시분할 기술 최초 사용&lt;/li&gt;
  &lt;li&gt;SNA(System Network Architecture) : 네트워크의 표준화를 제시한 최초의 네트워크 시스템&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;데이터-통신-시스템&quot;&gt;데이터 통신 시스템&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;데이터 전송계
    &lt;ul&gt;
      &lt;li&gt;단말장치(DTE : Data Terminal Equipment)
        &lt;ul&gt;
          &lt;li&gt;데이터 전송 회선&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;신호변환기(DCE) / 통신회선&lt;/li&gt;
      &lt;li&gt;통신 제어 장치(CCU:Communication Control Unit) : 오류/동기/흐름/응답 제어&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터 처리계
    &lt;ul&gt;
      &lt;li&gt;컴퓨터
        &lt;ul&gt;
          &lt;li&gt;하드웨어 / 소프트웨어&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DTE ⇒ DCE ⇒ 통신망 ⇒ DCE ⇒ DTE ⇒ CCU ⇒ HOST Com&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;데이터-통신-시스템의-구성-요소&quot;&gt;데이터 통신 시스템의 구성 요소&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;통신 시스템의 3대 구성 요소 : 단말 장치, 통신 제어 장치, 전송 장치&lt;/li&gt;
  &lt;li&gt;전송 시스템의 3대 구성 요소 : 단말 장치, 통신 제어 장치, 데이터 전송 회선&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;베어러-속도--반송-속도&quot;&gt;베어러 속도 = 반송 속도&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;데이터 신호에 동기 신호와 상태 신호를 합한 속도&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;디지털-vs-아날로그-신호&quot;&gt;디지털 vs 아날로그 신호&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;디지털 : 많은 대역폭이 필요, 전송 거리가 짧아 증폭기 사용, LSI/VLSI 기술 진보&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;모뎀의-분류&quot;&gt;모뎀의 분류&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;동기 방식
    &lt;ul&gt;
      &lt;li&gt;비동기식 모뎀 방식 : ASK, FSK&lt;/li&gt;
      &lt;li&gt;동기식 모뎀 방식 : PSK, QAM&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;FSK(Frequency Shift Keying: 주파수 편이 변조)&lt;br /&gt;
Non-coherent 방식 : 다양한 주파수와 진폭, 다양한 모양의 위상, 비동기와 유사&lt;/li&gt;
  &lt;li&gt;QAM(Quadrature Amplitude Modulation : 진폭 위상 변조, 직교 위상 변조)&lt;br /&gt;
Coherent 방식 : 단일 주파수, 같은 모양의 위상, 동기와 유사&lt;br /&gt;
2차원 벡터 공간에서 신호를 사용할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dsudigital-service-unit&quot;&gt;DSU(Digital Service Unit)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;신호 변환 방식
    &lt;ul&gt;
      &lt;li&gt;단극 RZ(Return to Zero)&lt;/li&gt;
      &lt;li&gt;양극 NRZ(Non Return to Zero)
        &lt;ul&gt;
          &lt;li&gt;NRZ-L(Level) : ‘1’ : 양극 / ‘0’ : 음극&lt;/li&gt;
          &lt;li&gt;NRZ-M(Mark=’1’) : ‘1’ : 비트 간격의 중간에서 천이 / ‘0’ : 천이 없음&lt;/li&gt;
          &lt;li&gt;NRZ-S(Space=’0’) : ‘1’ : 천이 없음 / ‘0’ : 비트 간격의 중간에서 천이&lt;/li&gt;
          &lt;li&gt;NRZ-I(Inversion) : ‘0, 1 ⇒ 1’ : Interval 중간에서 변화&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;바이폴라(Bipolar)
        &lt;ul&gt;
          &lt;li&gt;AMI(교호 반전 부호), 3원 부호, ISDN 신호 방식, 동기화 어려움&lt;/li&gt;
          &lt;li&gt;‘1’ : 양극과 음극 교대로 변환, ‘0’ : Zero&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;맨체스터(Manchester)
        &lt;ul&gt;
          &lt;li&gt;하나의 펄스폭을 2개로 나누어 ‘1’, ‘0’을 반대로 구성하여 사용&lt;/li&gt;
          &lt;li&gt;CSMA/CD LAN에서의 전송부호로 사용, 동기화 가능&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;codec&quot;&gt;CODEC&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;양자화 잡음(PCM 극 장치) : 실수형의 표본 값 ⇒  정수 반올림, 이 때 발생하는 오차&lt;/li&gt;
  &lt;li&gt;부호화 : 인접 부호 간 1비트만 변화하는 그레이코드 주로 사용
    &lt;ul&gt;
      &lt;li&gt;원천 부호화: 제한된 대역폭에서 고속 전송
        &lt;blockquote&gt;
          &lt;p&gt;DM(Delta Modulation), PCM(Pulse Code Modulation)
허프만 코딩, LPC(Linear Predictive Coding), PNM&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;채널 부호화 : 에러 검출 및 정정을 위한 비트를 추가하여 전송&lt;/li&gt;
      &lt;li&gt;파형 부호화 : 디지털 부호를 전송 회선에 적합한 파형으로 변환하는 방식
        &lt;blockquote&gt;
          &lt;p&gt;PCM, DPCM, ADPCM, DM&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ISI(InterSymbol Interference)&lt;br /&gt;
PCM에서 수신된 신호 파형이 일그러져서 각 비트에 할당된 슬롯 타임을 벗어나 인접 슬롯 타임에 영향을 주는 현상, 이러한 현상으로 신호 파형이 중첩되게 된다
중첩되는 모양을 오실로스코프로보면 사람의 눈을 닮아 아이 패턴이라 함&lt;/li&gt;
  &lt;li&gt;Optimum Sampling Time : 아이 패턴이 열린 최대 높이가 최적의 샘플링&lt;/li&gt;
  &lt;li&gt;Sensitivity to Timing Error : 아이 패턴의 기울기를 통해 시간 오차에 대한 민감도 평가&lt;/li&gt;
  &lt;li&gt;Noise Margin : 아이 패턴이 눈을 뜬 상하의 높이 만큼&lt;/li&gt;
  &lt;li&gt;Maximum Distortion : 아이 패턴의 맨 위와 맨 아래의 파형들의 진동폭은 신호가 샘플링되는 순간 왜곡되는 최대값&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;비동기식-전송&quot;&gt;비동기식 전송&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;간헐적, 독립적, 문자 단위 전송&lt;/li&gt;
  &lt;li&gt;휴지 시간 존재, 저속 전송, 버퍼를 적게 사용&lt;/li&gt;
  &lt;li&gt;대화용 전송에 적당, ASK/FSK&lt;/li&gt;
  &lt;li&gt;일반적으로 패리티 비트 추가 전송
    &lt;h3 id=&quot;동기식-전송&quot;&gt;동기식 전송&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;블록 단위 전송, 파일 전송 적합&lt;/li&gt;
  &lt;li&gt;PSK, QAM&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rs-232c&quot;&gt;RS-232C&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;핀4(RTS-송신 요청) : 송신할 데이터가 있음을 DTE에서 DCE로 전달&lt;/li&gt;
  &lt;li&gt;핀5(CTS-송신 준비 완료) : DCE에서 DTE로 신호 전달, ON/OFF&lt;/li&gt;
  &lt;li&gt;핀8(DCD-수신선 신호 감지) : DCE가 선로쪽으로부터 감시할 수 있는 크기의 신호를 수신하고 있음을 DTE에게 통보&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;데이터-전송-프레임&quot;&gt;데이터 전송 프레임&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;문자 지향 프레임 = BSC 프레임 구조
    &lt;ul&gt;
      &lt;li&gt;BASIC, 반이중 방식만 사용&lt;/li&gt;
      &lt;li&gt;같은 전송 회선만 가능 (종속적)&lt;/li&gt;
      &lt;li&gt;동기/비동기 전송 방식 사용&lt;/li&gt;
      &lt;li&gt;SYN(7) / SYN(7) / SOH(7) /Heading / STX(7) / TEXT / ETX(7) / BCC(7)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;비트 지향 프레임
    &lt;ul&gt;
      &lt;li&gt;동기식 전송&lt;/li&gt;
      &lt;li&gt;Flag(8) / Address(8bit ~ 8Byte) / Control(8/16) / Info / FCS(16/32) / FLAG(8)&lt;/li&gt;
      &lt;li&gt;Control
        &lt;ul&gt;
          &lt;li&gt;I Frame : 첫 번째 비트가 0, 순수한 정보, 피기백킹&lt;/li&gt;
          &lt;li&gt;S Frame : 상위 두 비트 10, 감시, 감독&lt;/li&gt;
          &lt;li&gt;U Frame : 상위 두 비트 11, 초기 설정 및 링크 확립과 해제
            &lt;ul&gt;
              &lt;li&gt;NRM(표준 응답 모드 : Normal Response Mode, UNC)&lt;br /&gt;
반이중 통신, 주 스테이션이 링크 제어&lt;/li&gt;
              &lt;li&gt;ARM(비동기 응답 모드 : Asynchronous Response Mode, UAC)&lt;br /&gt;
전이중 통신, 주 스테이션이 링크 제어&lt;/li&gt;
              &lt;li&gt;ABM(비동기 균형 모드 : Asynchronous Balance Mode, BAC)&lt;/li&gt;
              &lt;li&gt;전이중 통신, 주 스테이션과 부 스테이션 구분이 없음&lt;/li&gt;
              &lt;li&gt;링형, 망형 구조&lt;/li&gt;
              &lt;li&gt;X.25링크에서 LAPB와 동일&lt;/li&gt;
              &lt;li&gt;SIM(Set Initial Mode) : 설정 초기화&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;오류-제어&quot;&gt;오류 제어&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;순방향 오류 수정(FEC : Forward Error Correction) :
    &lt;ul&gt;
      &lt;li&gt;해밍코드
        &lt;blockquote&gt;
          &lt;p&gt;해밍 거리 : 같은 비트 수를 갖는 이진 부호 사이에 대응되는 비트 값이 일치되지 않는 것의 개수&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;상승코드&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;역방향 오류 수정(BEC : Backward Error Correction) : 역 채널 필요 ⇒ 재전송
    &lt;ul&gt;
      &lt;li&gt;CRC, 패리티 비트, 블록 합&lt;/li&gt;
      &lt;li&gt;ARQ
        &lt;ul&gt;
          &lt;li&gt;Stop-And-Wait : BASIC 전송 절차&lt;/li&gt;
          &lt;li&gt;Go-Back-N :
            &lt;ul&gt;
              &lt;li&gt;오류가 발생한 프레임부터 다시 전송, 중복 전송 문제 발생&lt;/li&gt;
              &lt;li&gt;HDLC, SDLC&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Selective-Repeat :
            &lt;ul&gt;
              &lt;li&gt;오류가 발생한 프레임만 재전송, 별도의 버퍼가 필요&lt;/li&gt;
              &lt;li&gt;HDLC&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Dynamically&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;오류-검출-방식&quot;&gt;오류 검출 방식&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;군 계수 검사 방식&lt;/li&gt;
  &lt;li&gt;패리티 방식 : 짝수 개의 비트가 오류가 발생할 경우 검출률이 낮아짐
    &lt;ul&gt;
      &lt;li&gt;수직 중복 검사(VRC : Vertical Redundancy Check)&lt;/li&gt;
      &lt;li&gt;세로 중복 검사(LRC : Longitudinal Redundancy Check)&lt;/li&gt;
      &lt;li&gt;순환 중복 방식(CRC : Cyclic Redundancy Check = 집단, 군집 오류 검출)
        &lt;ul&gt;
          &lt;li&gt;다항식을 계산, 오류를 수정할 수는 없음(재전송 요청)&lt;/li&gt;
          &lt;li&gt;동기식 전송에 적합&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;검사 합(Check Sum)&lt;/li&gt;
  &lt;li&gt;해밍 코드&lt;/li&gt;
  &lt;li&gt;상승 코드&lt;br /&gt;
여러 개의 비트 오류가 있더라도 한계값/순차적 디코딩을 이용하여 모두 수정&lt;/li&gt;
  &lt;li&gt;정 마크 방식 : 전송 비트수에 1의 개수와 0의 개수를 고정적으로 정하여 전달
    &lt;ul&gt;
      &lt;li&gt;2 out-of 5 : 5개의 비트 전송 ⇒ 1의 비트 2개, 0의 비트 3개&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;다중화기&quot;&gt;다중화기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;주파수 분할 다중화(FDM : Frequency Division Multiplexing)
    &lt;ul&gt;
      &lt;li&gt;전송 매체의 유효 대역폭이 클 때 사용&lt;/li&gt;
      &lt;li&gt;아날로그 신호, 비용 저렴, 기술이 간단&lt;/li&gt;
      &lt;li&gt;비동기식 전송, 멀티 포인트 방식에 적합&lt;/li&gt;
      &lt;li&gt;모뎀의 역할을 겸하므로 별도의 모뎀이 필요하지 않음&lt;/li&gt;
      &lt;li&gt;전송지연 없이 실시간 전송이 가능&lt;/li&gt;
      &lt;li&gt;보호대역 때문에 대역폭이 낭비&lt;/li&gt;
      &lt;li&gt;TV, 라디오와 같은 공중파, CATV, ADSL&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;시간 분할 다중화(TDM : Time Division Multiplexing)
    &lt;ul&gt;
      &lt;li&gt;전송 매체의 유효 전송률이 클 때 사용&lt;/li&gt;
      &lt;li&gt;디지털 신호, 비용/기술 복잡&lt;/li&gt;
      &lt;li&gt;전송지연 없이 실시간 전송이 가능&lt;/li&gt;
      &lt;li&gt;별도의 모뎀 필요, 대역폭이 낭비되지 않음&lt;/li&gt;
      &lt;li&gt;STDM(동기식 시분할 다중화 : Synchronous TDM)&lt;/li&gt;
      &lt;li&gt;ATDM(비동기식/통계적 시분할 다중화 : Asynchronous TDM)
        &lt;ul&gt;
          &lt;li&gt;흐름 제어, 에러 제어 및 자체 진단 기능 ⇒ 지능 다중화기&lt;/li&gt;
          &lt;li&gt;헤더 정보를 필요로 하며, STDM에 비해 시간 슬롯 당 정보 전송률 증가&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;코드 분할 다중화(CDM : Code Division Multiplexing)
    &lt;ul&gt;
      &lt;li&gt;확산 대역 방식, 전송 용량/품질 증가&lt;/li&gt;
      &lt;li&gt;보안성 보장, 전송지연이 감소, 이동통신에 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;다중화의-발전-기술&quot;&gt;다중화의 발전 기술&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;OFDM(Orthogonal Frequency Division Multiplexing : 직교 주파수 분할)
    &lt;ul&gt;
      &lt;li&gt;분할된 반송파 사이의 주파수 간격을 최소화하기 위해 직교 다중화&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DSSD(Direct Sequence Spread Spectrum)
    &lt;ul&gt;
      &lt;li&gt;고정된 하나의 채널을 이용하여 전송하는 방식&lt;/li&gt;
      &lt;li&gt;디지털 데이터를 넓은 대역으로 분산하여 전송하는 방식&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;FHSS(Frequency Hopping Spread Spectrum)
    &lt;ul&gt;
      &lt;li&gt;23개의 채널을 이용하여 데이터를 전송하는 방식&lt;/li&gt;
      &lt;li&gt;송수신측에서 주파수의 위치를 변화시키면서 통신하는 방식&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;블루투스&quot;&gt;블루투스&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;RF &amp;amp; Baseband - 물리 계층 : 통신 장비&lt;/li&gt;
  &lt;li&gt;Link Manager - 링크 계층 : 연결 보안 설정&lt;/li&gt;
  &lt;li&gt;HCI Bottom - 네트워크 계층&lt;/li&gt;
  &lt;li&gt;HCI Top - 전송 계층 : 통신 기기와 통신 기기 제어기 사이에 연결&lt;/li&gt;
  &lt;li&gt;L2CAP - 세션 계층 : 통신 기기 프로토콜과 통신 기기 제어기 프로토콜 사이를 중재&lt;/li&gt;
  &lt;li&gt;RFCOMM - 통신 기기 간의 논리적 접속 제어&lt;/li&gt;
  &lt;li&gt;Application&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;집중화기&quot;&gt;집중화기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;여러 개의 채널을 몇 개의 소수 회선으로 공유화시키는 장치&lt;/li&gt;
  &lt;li&gt;구조 복잡, 불규칙 전송에 사용&lt;/li&gt;
  &lt;li&gt;입출력 각각의 채널 대역폭이 다르다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;전용-회선&quot;&gt;전용 회선&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;직통 회선 / 분기 회선 / 직선 분기 회선&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;교환-회선&quot;&gt;교환 회선&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;회선 교환 방식 : 관리 제어 신호, 주소 제어 신호, 호 정보 제어 신호, 감시 제어 신호
    &lt;ul&gt;
      &lt;li&gt;SLIP : 교환기 사이에 클록 주파수의 차이로 데이터의 손실이 발생 (DCS 설치 필)&lt;/li&gt;
      &lt;li&gt;공간 분할 교환 방식
        &lt;ul&gt;
          &lt;li&gt;단일 / 다단 교환 방식&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;시간 분할 교환 방식
        &lt;ul&gt;
          &lt;li&gt;TDM 버스 교환 방식 ⇒ 동기식&lt;/li&gt;
          &lt;li&gt;시간 슬롯 상호 교환 방식 ⇒ 대부분 사용, 전 2중 동작을 위해 한 쌍의 슬롯&lt;/li&gt;
          &lt;li&gt;시간 다중화 방식 : TSI 장치 문제점(크기가 커지면 지연이 커짐) 해결&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;축적 교환 방식
    &lt;ul&gt;
      &lt;li&gt;메시지 교환 방식&lt;/li&gt;
      &lt;li&gt;패킷 교환 방식
        &lt;ul&gt;
          &lt;li&gt;가상 회선 패킷 교환 방식&lt;/li&gt;
          &lt;li&gt;데이터 그램 패킷 교환 방식&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;교환-기술의-성능-비교-요소&quot;&gt;교환 기술의 성능 비교 요소&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;전파 지연 / 전송 시간 / 노드 지연 시간 / 데이터 처리율&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;경로-선택&quot;&gt;경로 선택&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;비적응적 방법 : 정적, 수동적인 방법
    &lt;ul&gt;
      &lt;li&gt;고정 경로 선택(=착국 부호 방식, Fixed Routing)&lt;br /&gt;
상대방에 미리 붙여둔 번호를 해석해서 진행 경로 선정&lt;/li&gt;
      &lt;li&gt;범람 경로 선택(Flooding Routing)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;적응적 방법 : 능동적
    &lt;ul&gt;
      &lt;li&gt;국부적 경로 선택(Isolated Routing) : 독립적인 판단에 의해 결정&lt;/li&gt;
      &lt;li&gt;분산 경로 선택(Distribute Routing) : 자신을 중심으로 연결되어 있는 모든 경로 정보 분석&lt;/li&gt;
      &lt;li&gt;집중 경로 선택(Centralized Routing) : 전체 네트워크 경로 흐름 파악/제어하는 RCC(Routing Control Center)의 정보로 경로를 선택&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;경로-선택-프로토콜&quot;&gt;경로 선택 프로토콜&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;RIP(Routing Information Protocol) : 평면적인 구조, 인접해있는 게이트웨이 정보 취득&lt;/li&gt;
  &lt;li&gt;OSPF(Open Shortest Path Fast) : 계층적인 구조, 링크상태 알고리즘 사용&lt;/li&gt;
  &lt;li&gt;BGP(Border Gateway Protocol) : 두 개 이상의 AS(자율적으로 사용하는 라우터 집합)로 사용되는 프로토콜, 관리자에 의해 독자적인 경로 설정이 필요할 때 사용&lt;/li&gt;
  &lt;li&gt;IGRP(Internet Gateway Routing Protocol) : BGP를 보완, 중간 규모 네트워크&lt;/li&gt;
  &lt;li&gt;RTP(Reliable Transport Protocol) : EIGRP(IGRP 개선) 패킷의 송수신을 위해 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;트래픽-제어&quot;&gt;트래픽 제어&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;흐름 제어
    &lt;ul&gt;
      &lt;li&gt;슬라이딩 윈도(Sliding Window)&lt;br /&gt;
송신측에서는 수신측으로부터 전송할 프레임의 개수 미리 지정받음&lt;br /&gt;
수신측에서 전송할 프레임의 개수를 다시 지정 시 전송 가능&lt;br /&gt;
X.25 패킷 레벨의 프로토콜에서도 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;혼잡 제어&lt;/li&gt;
  &lt;li&gt;교착 상태 회피&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lanlocal-area-network&quot;&gt;LAN(Local Area Network)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;어떤 종류의 시스템 기기와도 연결이 가능&lt;/li&gt;
  &lt;li&gt;오류 발생률 낮고 전송 지연을 최소화할 수 있음&lt;/li&gt;
  &lt;li&gt;공유 매체 사용 ⇒ 경로 선택 없이 매체에 연결된 모든 장치로 데이터 전송 가능&lt;/li&gt;
  &lt;li&gt;재배치, 확장성 우수&lt;/li&gt;
  &lt;li&gt;광대역 전송 매체의 사용으로 고속 통신이 가능&lt;/li&gt;
  &lt;li&gt;DCF(CSMA/CA방식) : IEEE 802.11의 기본적인 매체 접근 방식&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;isdnintegrated-service-digital-network&quot;&gt;ISDN(Integrated Service Digital Network)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;하나의 통신망으로 통폐합 ⇒ 확장성, 재배치 우수&lt;/li&gt;
  &lt;li&gt;모든 통신 선로와 교환기를 디지털화&lt;/li&gt;
  &lt;li&gt;복수 통신 가능, 중복 투자 회피(경제적)&lt;/li&gt;
  &lt;li&gt;기존 전화망 ⇒ 디지털 교환기와 연결하여 기본 서비스 제공(2B+D)&lt;/li&gt;
  &lt;li&gt;규모가 큰 사용자와 기업은 광케이블 설치하여 1차군 서비스(23B/30B+D) 제공&lt;/li&gt;
  &lt;li&gt;회선 교환 방식, 패킷 교환 방식&lt;/li&gt;
  &lt;li&gt;64kbps 1회선 교환 서비스가 기본&lt;/li&gt;
  &lt;li&gt;접속점(기준점, 분계점)
    &lt;ul&gt;
      &lt;li&gt;타인의 전산망 기기와 접속되는 경우에 그 설치와 보전에 관한 책임의 한계를 명확하게 구분하기 위한 접속점&lt;/li&gt;
      &lt;li&gt;U(User) / T(Terminal) / S(System) / R(Rate)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;atmasynchronous-transfer-mode--비동기-전송-방식&quot;&gt;ATM(Asynchronous Transfer Mode : 비동기 전송 방식)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;일정한 크기(쉘)로 구분하여 순서대로 전송하는 자료의 전송 방식 ⇒ 송수신 처리 간단&lt;/li&gt;
  &lt;li&gt;오버헤드가 줄어 고속 전송 가능, 멀티미디어 서비스 적합&lt;/li&gt;
  &lt;li&gt;비동기식 다중화 방식 사용&lt;/li&gt;
  &lt;li&gt;양 끝단 간 오류와 흐름을 제어 ⇒ 어떤 종류의 서비스라도 제공 가능&lt;/li&gt;
  &lt;li&gt;물리 계층 : 셀의 속도 조정, 셀의 경계 식별, 비트 타이밍&lt;/li&gt;
  &lt;li&gt;ATM 계층 : 일반 흐름 제어, 셀 헤더 생성 및 추출, 셀 교환, 셀 다중화 및 역다중화&lt;/li&gt;
  &lt;li&gt;ATM 적용 계층(AAL) : 수렴과 셀 분할 조립&lt;/li&gt;
  &lt;li&gt;상위 계층 : 서비스별 상위 계층 기능&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lan-계층&quot;&gt;LAN 계층&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;물리 계층 + 데이터 링크 계층&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;x25-계층&quot;&gt;X.25 계층&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;물리 계층 + 프레임 계층 + 패킷 계층&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;tcpip인터네트워킹-계층&quot;&gt;TCP/IP(인터네트워킹) 계층&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;링크 계층 + 인터넷 계층 + 전송 계층 + 응용 계층&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;ppppoint-to-point-protocol&quot;&gt;PPP(Point to Point Protocol)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;전화선과 모뎀을 이용하여 인터넷에 접속하기 위한 프레임 프로토콜&lt;/li&gt;
  &lt;li&gt;SLIP 개선 ⇒ 에러 검출 기능, 복구 기능 추가, 문자 위주 프레임&lt;/li&gt;
  &lt;li&gt;IETF 표준 프로토콜, 다중 프로토콜 지원&lt;/li&gt;
  &lt;li&gt;오류 검출만 제공, 재전송을 통한 오류 복구와 흐름 제어 기능 제공하지 않음&lt;/li&gt;
  &lt;li&gt;비동기식 링크도 지원해야 하므로 프레임은 반드시 바이트의 정수배&lt;/li&gt;
  &lt;li&gt;Protocol Field
    &lt;ul&gt;
      &lt;li&gt;PAP(Password Authentication Protocol)&lt;br /&gt;
초기 접속 시 ID/Password를 미리 입력해 놓으면 자동으로 접속&lt;br /&gt;
2-Way 방식&lt;/li&gt;
      &lt;li&gt;CHAP(Challenge Handshake Authentication Protocol)&lt;br /&gt;
매번 접속 시 3단계 핸드쉐이크 인증을 행하는 방법, 안전&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ip-계층의-주요-기능&quot;&gt;IP 계층의 주요 기능&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;패킷을 절단(단편화), 재조립&lt;/li&gt;
  &lt;li&gt;비연결성 네트워크 프로토콜&lt;/li&gt;
  &lt;li&gt;주소 지정, 논리적으로 관리&lt;/li&gt;
  &lt;li&gt;수명 시간 관리, 오류 제어, 흐름 제어&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;네트워크-계층-프로토콜&quot;&gt;네트워크 계층 프로토콜&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;ARP(Address Resolution Protocol)&lt;/li&gt;
  &lt;li&gt;RARP(Reverse Address Resolution Protocol)&lt;/li&gt;
  &lt;li&gt;ICMP(Internet Control Message Protocol)&lt;/li&gt;
  &lt;li&gt;IGMP(Internet Group Management Protocol)&lt;/li&gt;
  &lt;li&gt;DNS(Domain Name System)&lt;/li&gt;
  &lt;li&gt;DHCP(Dynamic Host Configuration Protocol)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;전송-계층-프로토콜&quot;&gt;전송 계층 프로토콜&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;RTP(Real Time Transport Protocol)
    &lt;ul&gt;
      &lt;li&gt;실시간으로 음성이나 동화상을 송수신하기 위한 통신 규약&lt;/li&gt;
      &lt;li&gt;UDP / 응용프로그램 사이&lt;/li&gt;
      &lt;li&gt;Version(V)&lt;/li&gt;
      &lt;li&gt;Padding(P) : 추가적인 데이터들이 포함되어 있는지를 표시&lt;/li&gt;
      &lt;li&gt;Extension(X) : 고정 헤드와 페이로드 사이에 확장 헤드가 있는지 여부 표시&lt;/li&gt;
      &lt;li&gt;Marker(M) : 패킷 스트림에서 프레임 간의 경계에 존재하는 특별한 경우&lt;/li&gt;
      &lt;li&gt;PT(Payload Type) : 데이터가 어떤 형식인지를 결정&lt;/li&gt;
      &lt;li&gt;Sequence Number&lt;/li&gt;
      &lt;li&gt;TimeStamp : 첫 번째 바이트의 샘플링 시점&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;RTCP(RTP Control Protocol)
    &lt;ul&gt;
      &lt;li&gt;RTP를 제어하기 위한 프로토콜&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;국제-표준화-단체의-기술&quot;&gt;국제 표준화 단체의 기술&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;ISO : HDLC&lt;/li&gt;
  &lt;li&gt;IETF : PPP&lt;/li&gt;
  &lt;li&gt;IEEE : LLC&lt;/li&gt;
  &lt;li&gt;ITU : LAPB, CCITT, PSDN, PSTN, IDSN&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;서브넷-마스크&quot;&gt;서브넷 마스크&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;네트워크 논리적인 분할, 네트워크 ID와 호스트 ID 구별&lt;/li&gt;
  &lt;li&gt;네트워크의 부하 감소&lt;/li&gt;
  &lt;li&gt;A Class : 1 + Network Address(7) / Host Address(24)&lt;/li&gt;
  &lt;li&gt;B Class : 10 + Network Address(14) / Host Address (16)&lt;/li&gt;
  &lt;li&gt;C Class : 110 + Network Address(21) / Host Address (8)&lt;/li&gt;
  &lt;li&gt;D Class : 1110 + Multicast Address&lt;/li&gt;
  &lt;li&gt;E Class : 1111 + Test Address&lt;/li&gt;
&lt;/ul&gt;</content><author><name>SG Yoo.</name><email>many258@naver.com</email></author><category term="study" /><category term="(구)정보처리기사" /><category term="컴퓨터일반" /><summary type="html">주의) 해당 내용은 (구)정보처리기사, 컴퓨터일반 내용을 기반으로 문서화하였습니다. 수정이 필요하거나, 부족한 내용이 있을시 답글을 남겨주시면 해당 항목을 수정하겠습니다.</summary></entry><entry><title type="html">[(구)정처기/컴퓨터일반] (4) 소프트웨어 공학 자주 틀리는 내용 정리</title><link href="https://many258.github.io//study/software-engineering/" rel="alternate" type="text/html" title="[(구)정처기/컴퓨터일반] (4) 소프트웨어 공학 자주 틀리는 내용 정리" /><published>2021-01-26T00:00:00+09:00</published><updated>2021-01-26T21:37:34+09:00</updated><id>https://many258.github.io//study/%7Bsoftware-engineering%7D</id><content type="html" xml:base="https://many258.github.io//study/software-engineering/">&lt;p class=&quot;notice--warning&quot;&gt;&lt;span style=&quot;color:red;font-weight:bold;&quot;&gt;주의)&lt;/span&gt;
해당 내용은 (구)정보처리기사, 컴퓨터일반 내용을 기반으로 문서화하였습니다.
수정이 필요하거나, 부족한 내용이 있을시 답글을 남겨주시면 해당 항목을 수정하겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;소프트웨어-생명주기&quot;&gt;소프트웨어 생명주기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;나선형 모델
    &lt;blockquote&gt;
      &lt;p&gt;계획 수립(Planning) → 위험 분석(Risk analysis) → 개발(Engineering) → 고객 평가(Customer evaluation)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;프로젝트-계획-단계의-특징&quot;&gt;프로젝트 계획 단계의 특징&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;정의 단계의 시작 단계&lt;/li&gt;
  &lt;li&gt;개발 비용을 추정&lt;/li&gt;
  &lt;li&gt;유지보수 비용은 개발이 모두 끝난 뒤 책정&lt;/li&gt;
  &lt;li&gt;계획 단계에서 프로젝트 관리자의 임무는 매우 중요&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;소프트웨어-범위-결정-사항&quot;&gt;소프트웨어 범위 결정 사항&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;기능, 성능, 제약 조건, 개발 인원, 일정 계획&lt;/li&gt;
  &lt;li&gt;위험성을 최소화 목적&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;소프트웨어-비용-측정-4가지-원칙&quot;&gt;소프트웨어 비용 측정 4가지 원칙&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;소프트웨어 비용 측정을 최대한 지연&lt;/li&gt;
  &lt;li&gt;분해 기술(단계별, 인월별 분해) 이용&lt;/li&gt;
  &lt;li&gt;실험적 비용 측정 모델을 이용&lt;/li&gt;
  &lt;li&gt;자동화 도구 이용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;비용-측정-방법론&quot;&gt;비용 측정 방법론&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;COCOMO(COnstructive COst MOdel)
    &lt;ul&gt;
      &lt;li&gt;Boehm, 상향식, 수학적 산정 기법&lt;/li&gt;
      &lt;li&gt;변화 모형(Basic, Intermediate, Detailed)&lt;/li&gt;
      &lt;li&gt;규모 모형(Organic, Semi-detached, Embedded)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Putnam 모형
    &lt;ul&gt;
      &lt;li&gt;시간에 따른 함수로 표현되는 Rayleigh-Norden 곡선의 노력분포도 곡선&lt;/li&gt;
      &lt;li&gt;기초로 만든 자동화 도구 SLIM&lt;/li&gt;
      &lt;li&gt;대형 프로젝트의 노력 분포 산정에 용이&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cpmcritical-path-method&quot;&gt;CPM(Critical Path Method)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;병행 작업이 가능하도록 계획&lt;/li&gt;
  &lt;li&gt;비용측정은 하지 않음&lt;/li&gt;
  &lt;li&gt;이전 작업이 모두 완료되지 않으면 다음 작업으로 진행 불가&lt;/li&gt;
  &lt;li&gt;정확한 일정 예측은 불가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;위험-관리-절차&quot;&gt;위험 관리 절차&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;위험 식별 : 위험 요소가 될 사항&lt;/li&gt;
  &lt;li&gt;위험 분석 및 평가 : 위험의 비중과 영향력 파악&lt;/li&gt;
  &lt;li&gt;위험 관리 계획 : 위험 예방, 대안 준비, 문서화&lt;/li&gt;
  &lt;li&gt;위험 감시 및 조치 : 위험 관찰, 모니터링&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;위험표-포함-사항&quot;&gt;위험표 포함 사항&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;위험 발생 확률&lt;/li&gt;
  &lt;li&gt;위험의 내용 및 종류&lt;/li&gt;
  &lt;li&gt;위험에 따르는 영향력&lt;/li&gt;
  &lt;li&gt;위험 발생 시간 X&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;자료-흐름도&quot;&gt;자료 흐름도&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;프로세스 : 원 / 데이터 흐름 : 화살표 / 데이터 저장 : 실선 2줄 / 입출력 : 사각형&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;소단위-명세서&quot;&gt;소단위 명세서&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;설계 단계에서 사용하는 구조적인 언어 사용 가능&lt;/li&gt;
  &lt;li&gt;서술 문장, 의사결정 나무, 의사 결정표, 표, 그래프 등&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;소프트웨어-설계-모형&quot;&gt;소프트웨어 설계 모형&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;문서량 기준 : 데이터(DD, 메타데이터) ⇒ 구조(구조도) ⇒ 관계 ⇒ 절차(PDL 알고리즘)&lt;/li&gt;
  &lt;li&gt;노력 기준 : 절차 ⇒ 관계 ⇒ 구조 ⇒ 데이터&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hipohierarchy-plus-input-process-output&quot;&gt;HIPO(Hierarchy plus Input Process Output)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;하향식 설계 기법, IBM에서 개발한 프로그램을 기능 위주로 문서화&lt;/li&gt;
  &lt;li&gt;입력/처리/출력 구성, 소규모 프로젝트에 적합&lt;/li&gt;
  &lt;li&gt;도식 목차(가시적 도표, Visual Table of Contents) : 전체적인 흐름과 구조&lt;/li&gt;
  &lt;li&gt;총괄 도표(총체적 도표, Overview Diagram) : 입력, 처리, 출력 등의 기능 명확히 표현&lt;/li&gt;
  &lt;li&gt;상세 도표(세부적 도표, Detail Diagram) : 총괄 도표의 일부 기능을 구체적으로 표현&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;자료-흐름-설계-과정&quot;&gt;자료 흐름 설계 과정&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;정보 흐름의 유형을 설정&lt;/li&gt;
  &lt;li&gt;흐름의 경계를 표시&lt;/li&gt;
  &lt;li&gt;자료 흐름도를 프로그램 구조로 사상 ⇒ 변환 사상(Transform Mapping)&lt;/li&gt;
  &lt;li&gt;제어 계층을 분해시켜서 정의&lt;/li&gt;
  &lt;li&gt;경험적 방법으로 구체화&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;결합도약--강&quot;&gt;결합도(약 → 강)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;데이터 결합도(Data Coupling)&lt;/li&gt;
  &lt;li&gt;구조 결합도(Stamp Coupling) : 두 모듈이 매개 변수로 자료를 전달할 때, 자료 구조 형태&lt;/li&gt;
  &lt;li&gt;제어 결합도(Control Coupling)&lt;/li&gt;
  &lt;li&gt;외부 결합도(Extern Coupling)&lt;/li&gt;
  &lt;li&gt;공통 결합도(Common Coupling) : 두 모듈이 동일한 전역 데이터를 접근&lt;/li&gt;
  &lt;li&gt;내용 결합도(Content Coupling) : 하나의 모듈이 직접적으로 다른 모듈의 내용 참조&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;응집도약--강&quot;&gt;응집도(약 → 강)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;우연적 응집도(Coincidental Cohesion)&lt;/li&gt;
  &lt;li&gt;논리적 응집도(Logical Cohesion)&lt;/li&gt;
  &lt;li&gt;시기적 응집도(Temporal Cohesion)&lt;/li&gt;
  &lt;li&gt;절차적 응집도(Procedural Cohesion)&lt;/li&gt;
  &lt;li&gt;통신적 응집도(Communication Cohesion)&lt;/li&gt;
  &lt;li&gt;순차적 응집도(Sequential Cohesion)&lt;/li&gt;
  &lt;li&gt;기능적 응집도(Functional Cohesion)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;객체지향-분석-순서&quot;&gt;객체지향 분석 순서&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;객체 모델링 : 객체의 속성, 연산을 식별&lt;/li&gt;
  &lt;li&gt;동적 모델링 : 객체 모형들의 행위, 상태, 조건을 파악&lt;/li&gt;
  &lt;li&gt;기능 모델링 :&lt;br /&gt;
입출력 결정 ⇒ 자료 흐름도 ⇒ 기능의 내용 상세 기술 ⇒ 제약사항 결정 / 최소화&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;객체지향-기술&quot;&gt;객체지향 기술&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;다형성 : 동일한 메소드를 다양한 방법으로 사용할 수 있는 능력&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;객체-분석&quot;&gt;객체 분석&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;형식적인 전략으로 기술&lt;/li&gt;
  &lt;li&gt;모델링 구성 요소인 클래스, 객체, 속성, 연산들을 표현해서 문제를 모형화&lt;/li&gt;
  &lt;li&gt;E-R 다이어그램 적합, 개념적으로 파악&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;객체-설계&quot;&gt;객체 설계&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;구체적인 절차, 객체의 속성과 자료 구조를 표현&lt;/li&gt;
  &lt;li&gt;서브 클래스와 메시지 특성을 세분화하여 세부사항을 정제화&lt;/li&gt;
  &lt;li&gt;사용자 중심, 대화식 프로그램의 개발에 적합&lt;br /&gt;
cf) 객체 구현 : 객체의 정의&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;객체지향-기법-vs-구조적-프로그래밍-기법&quot;&gt;객체지향 기법 vs 구조적 프로그래밍 기법&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;추상적 자료형  vs 절대적 자료형&lt;/li&gt;
  &lt;li&gt;객체 사용 vs 함수 사용&lt;/li&gt;
  &lt;li&gt;메시지를 통해 객체 호출 vs 매개 변수를 통해 함수 호출&lt;/li&gt;
  &lt;li&gt;전역 변수에 영향 없음 vs 전역 변수에 영향 받음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;화이트-박스-검사-방법&quot;&gt;화이트 박스 검사 방법&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;기초 경로 검사(Basic Path Testing)
    &lt;ul&gt;
      &lt;li&gt;가능한 경로를 어느 정도 통과하는지의 적용 범위성 측정&lt;/li&gt;
      &lt;li&gt;복잡도(Cyclomatic Complexity)&lt;/li&gt;
      &lt;li&gt;V - E + R = 2 (V : 노드의 수, E : 간선의 수, R : 영역의 수)&lt;/li&gt;
      &lt;li&gt;화살표로 둘러싸인 면의 수 + 1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;블랙-박스-검사-방법&quot;&gt;블랙 박스 검사 방법&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;균등 분할(Equivalence Partitioning) : 정상 데이터 / 비정상 데이터&lt;/li&gt;
  &lt;li&gt;한계값 분석(Boundary Value Analysis) : 범위 한계 위주&lt;/li&gt;
  &lt;li&gt;원인-결과 그래프(Cause-Effect Graphing) : 임의의 자료 입력 ⇒ 정상 출력 확인&lt;/li&gt;
  &lt;li&gt;오류 예측(Error Guessing) : 데이터 확인 방법, 위 3가지 이외 오류 검사&lt;/li&gt;
  &lt;li&gt;비교 검사 : 하나의 프로그램을 여러 컴퓨터에서 테스트&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;소프트웨어-검사-단계&quot;&gt;소프트웨어 검사 단계&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;단위 검사(Class) ⇒ 통합 검사 ⇒ 검증 검사 ⇒ 시스템 검사&lt;/li&gt;
  &lt;li&gt;cf) 개발 순서 : 시스템 공학 ⇒ 요구 분석 ⇒ 설계 ⇒ 코딩(구현)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;통합-검사&quot;&gt;통합 검사&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;하향식(Top Down) 통합 검사 : 가짜 모듈이 필요(Stub), 회귀 검사, 프로그램 전체 실행&lt;/li&gt;
  &lt;li&gt;상향식(Bottom Up) 통합 검사 : Cluster, Driver, 중요한 모듈 우선 검사 가능&lt;/li&gt;
  &lt;li&gt;클러스터 결함 ⇒ 드라이버 작성 ⇒ 클러스터 검사 ⇒ 드라이버 제거 후 상위 결합&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;유지보수-비용-측정&quot;&gt;유지보수 비용 측정&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;BL방법 : M = P + K * e^(c-d) (M:인원/월, P : 비용, K : 상수, c : 복잡도, d : SW지식)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;유지보수-작업의-종류&quot;&gt;유지보수 작업의 종류&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;하자보수(=수리보수, Corrective M) : 잠재적인 오류 수정&lt;/li&gt;
  &lt;li&gt;기능 개선(=완전보수, Perfective M) : 기능의 수정, 추가, 전반적인 기능 개선 ⇒ 비용 많음&lt;/li&gt;
  &lt;li&gt;환경 적응(=적응보수, Adaptive M) : 환경 변화에 대응하여&lt;/li&gt;
  &lt;li&gt;예비 조치(=예방보수, Preventive M) : 미리 예측하여 준비&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;품질-목표-항목&quot;&gt;품질 목표 항목&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;정확성(Correctness) : 요구사항 충족시키는 정도&lt;/li&gt;
  &lt;li&gt;신뢰성(Reliability) : 요구된 기능을 오류없이 수행하는 시스템 능력 정도&lt;/li&gt;
  &lt;li&gt;효율성(Efficiency) : 최소한의 처리 시간과 기억 장소를 소유하여 요구된 기능 수행&lt;/li&gt;
  &lt;li&gt;유연성(Flexibility) : 새로운 요구사항에 접하여 쉽게 수정될 수 있는 능력&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;omaobject-management-architecture-레퍼런스-모델&quot;&gt;OMA(Object Management Architecture) 레퍼런스 모델&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;객체 간의 관계를 표현하는 표준 참조 모델&lt;/li&gt;
  &lt;li&gt;Object Service, Common Facilities, Domain Interface, Application Interface&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;소프트웨어-재공학reengineering&quot;&gt;소프트웨어 재공학(Reengineering)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;개조(Restructuring) : SW 기능을 변경하지 않으면서 SW 형태에 맞게 수정&lt;/li&gt;
  &lt;li&gt;같은 추상적인 수준에서 하나의 표현을 다른 형태로 바꾸는 작업&lt;/li&gt;
  &lt;li&gt;분석(Analysis) : 기존 SW의 명세서를 확인하여 SW 동작을 이해, 재공학 대상 선정&lt;/li&gt;
  &lt;li&gt;재개발(Redevelopment) : 기존의 SW 삭제 ⇒ 새롭게 개발&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;소프트웨어-재사용-단위&quot;&gt;소프트웨어 재사용 단위&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;명령어, 모듈, 요구분석서, 설계, 코딩 ⇒ 개발 비용은 변하면 안됨&lt;/li&gt;
&lt;/ul&gt;</content><author><name>SG Yoo.</name><email>many258@naver.com</email></author><category term="study" /><category term="(구)정보처리기사" /><category term="컴퓨터일반" /><summary type="html">주의) 해당 내용은 (구)정보처리기사, 컴퓨터일반 내용을 기반으로 문서화하였습니다. 수정이 필요하거나, 부족한 내용이 있을시 답글을 남겨주시면 해당 항목을 수정하겠습니다.</summary></entry><entry><title type="html">[(구)정처기/컴퓨터일반] (3) 운영체제 자주 틀리는 내용 정리</title><link href="https://many258.github.io//study/operating-system/" rel="alternate" type="text/html" title="[(구)정처기/컴퓨터일반] (3) 운영체제 자주 틀리는 내용 정리" /><published>2021-01-26T00:00:00+09:00</published><updated>2021-01-26T20:17:34+09:00</updated><id>https://many258.github.io//study/%7Boperating-system%7D</id><content type="html" xml:base="https://many258.github.io//study/operating-system/">&lt;p class=&quot;notice--warning&quot;&gt;&lt;span style=&quot;color:red;font-weight:bold;&quot;&gt;주의)&lt;/span&gt;
해당 내용은 (구)정보처리기사, 컴퓨터일반 내용을 기반으로 문서화하였습니다.
수정이 필요하거나, 부족한 내용이 있을시 답글을 남겨주시면 해당 항목을 수정하겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;어셈블리어의-장점&quot;&gt;어셈블리어의 장점&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;어셈블리어로 작성한 원시 프로그램을 기계어로 번역&lt;/li&gt;
  &lt;li&gt;기계어보다 쉽고, 이해하기가 쉽다&lt;/li&gt;
  &lt;li&gt;프로그램의 주소가 기호 번지이다&lt;/li&gt;
  &lt;li&gt;프로그램에 데이터를 사용하기 쉽다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;매크로-프로세서의-기능&quot;&gt;매크로 프로세서의 기능&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;매크로 정의 인식 : 매크로를 정의한 부분의 시작과 종료 파악&lt;/li&gt;
  &lt;li&gt;매크로 정의 저장 : 매크로 호출 시 확장하기 위해 저장&lt;/li&gt;
  &lt;li&gt;매크로 호출 인식 : 확장하기 위한 준비가 되어 있는 지 확인&lt;/li&gt;
  &lt;li&gt;매크로 확장 및 인수 : 원시 프로그램 위치에 저장된 내용과 인수를 치환&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;로더의-종류&quot;&gt;로더의 종류&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;절대 로더 : 로더의 역할 축소, 한 번 지정한 주기억 장소의 변경이 어려움
    &lt;ul&gt;
      &lt;li&gt;할당, 연결 ⇒ 프로그래머&lt;/li&gt;
      &lt;li&gt;재배치 ⇒ 번역 프로그램&lt;/li&gt;
      &lt;li&gt;적재 ⇒ 로더&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;직접 연결 로더 : 일반적인 로더 형태, 로더가 모두 수행&lt;/li&gt;
  &lt;li&gt;동적 로더 : CPU가 현재 사용중인 부분만 적재, 미사용 중인 것은 보조기억장치에 보관(Load-on-call)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;운영체제의-구성&quot;&gt;운영체제의 구성&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;제어프로그램
    &lt;ul&gt;
      &lt;li&gt;감시 프로그램(Supervisor P) : 일명 모니터, 지시/감독&lt;/li&gt;
      &lt;li&gt;데이터 관리 프로그램(Data Management P) : 주기억 장치, 보조기억 장치 간 작업&lt;/li&gt;
      &lt;li&gt;작업 제어 프로그램(Job Control P) : 스케쥴 및 시스템 지원 할당 등을 관리&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;처리 프로그램
    &lt;ul&gt;
      &lt;li&gt;언어 번역 프로그램 : 목적 프로그램으로 번역해주는 프로그램&lt;/li&gt;
      &lt;li&gt;서비스 프로그램 : 모듈이나 프로그램을 사용자가 사용할 수 있도록 제공&lt;/li&gt;
      &lt;li&gt;문제 프로그램 : 사용자의 응용 처리를 위해 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;운영체제의-발달-과정&quot;&gt;운영체제의 발달 과정&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;시분할 처리 : 전문적인 처리기가 존재 하지 않음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;스풀-vs-버퍼링&quot;&gt;스풀 vs 버퍼링&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;스풀(Spool) : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;프로그램&lt;/code&gt;과 I/O 장치와의 속도 차를 극복하기 위해, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HDD&lt;/code&gt;가 중재&lt;/li&gt;
  &lt;li&gt;버퍼링(buffering) : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CPU&lt;/code&gt;와 I/O 장치와의 속도 차를 극복하기 위해, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;주기억&lt;/code&gt; 장치가 중재&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pcbprocess-control-block--프로세스-생성-정보-없음&quot;&gt;PCB(Process Control Block) ⇒ 프로세스 생성 정보 없음&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;식별자, 현재 상태, PC, 우선순위, CPU 레지스터 정보, 계정 정보, 기억 장치 관련 정보&lt;/li&gt;
  &lt;li&gt;CPU의 각종 레지스터 상태를 가리키는 포인터, 입출력 정보&lt;/li&gt;
  &lt;li&gt;적재된 기억 장치 부분을 가리키는 포인터, 할당된 자원을 가리키는 포인터&lt;/li&gt;
  &lt;li&gt;부모/자식 프로세스를 가리키는 포인터&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;인터럽트-종류&quot;&gt;인터럽트 종류&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;SVC(SuperVisor Call) : 감시 프로그램 호출 시 발생&lt;br /&gt;
입출력 수행 루틴 호출 / 기억 장치 할당 루틴 / 오퍼레이터와의 대화&lt;/li&gt;
  &lt;li&gt;입출력(I/O) : 하드웨어적 인터럽트&lt;br /&gt;
입출력 채널 확인, 준비, 할당, 완료, 프로세스 전이(실행 ⇒ 대기)&lt;/li&gt;
  &lt;li&gt;외부(External) : 운영체제 소속이 아닌 외적인 요인으로부터 발생&lt;br /&gt;
인터럽트 시계에 의해 프로세스가 시간 할당량이 종료된 경우,&lt;br /&gt;
웹 서버나 프린터 서버를 운영하고 있는 상태에서 외부로부터 인터럽트 처리 신호 올 때&lt;/li&gt;
  &lt;li&gt;재시작 : 운영체제를 메모리에 다시 상주시킬 때&lt;/li&gt;
  &lt;li&gt;프로그램 검사 : 명령어를 수행하는 과정에서 부분적으로 발생되는 문제&lt;/li&gt;
  &lt;li&gt;기계 검사 : 시스템의 기계 고장&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cpu-스케줄링&quot;&gt;CPU 스케줄링&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;HRN(Highest Response-ratio Next) 스케줄링 기법
    &lt;blockquote&gt;
      &lt;p&gt;(대기 시간 + 서비스 시간) / 서비스 시간&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;세마포어의-특징&quot;&gt;세마포어의 특징&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;상호배제의 원리 보장&lt;/li&gt;
  &lt;li&gt;소프트웨어나 하드웨어로 구현 가능&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;V&lt;/code&gt; 조작 : Wake-Up = Up = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Signal&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; 조작 : Sleep = Down = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wait&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;교착-상태-해결-방안&quot;&gt;교착 상태 해결 방안&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;예방(Prevention)&lt;br /&gt;
상호배제 부정, 대기 제거, 선점 인정, 선형 대기 상태로 변경 ⇒ 효율적이지 못함&lt;/li&gt;
  &lt;li&gt;회피(Avoidance)&lt;br /&gt;
안정상태를 유지할 수 있는 프로세스의 자원 요구만 할당, 은행원 알고리즘&lt;/li&gt;
  &lt;li&gt;회복(Recovery)&lt;br /&gt;
선점 / 복귀 / 제거 / 사용자의 조치&lt;/li&gt;
  &lt;li&gt;발견(Detection)&lt;br /&gt;
자원 할당 그래프는 시스템이 중단된 이유가 교착상태인가를 발견하는 기법&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;주기억-장치-재사용-기술&quot;&gt;주기억 장치 재사용 기술&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;통합(Coalescing) : 인접한 공백들을 더 큰 하나의 공백으로 만드는 과정&lt;/li&gt;
  &lt;li&gt;집약(Compaction, 압축) : 서로 떨어져 있는 여러 개의 낭비 공간을 모아 하나의 공간으로&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;캐시-기억-장치&quot;&gt;캐시 기억 장치&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;주기억 장치 ↔ CPU 간 속도 차이 극복, 버퍼의 기능 수행&lt;/li&gt;
  &lt;li&gt;분리 캐시 : 캐시 접근 시 충돌을 방지하기 위해 코드와 데이터를 분리해서 기억&lt;/li&gt;
  &lt;li&gt;쓰기 접근 빈도가 높다 == 캐싱-일관성 문제가 발생할 확률 높음 == 성능 저하&lt;/li&gt;
  &lt;li&gt;사상 방법
    &lt;ul&gt;
      &lt;li&gt;직접 사상&lt;/li&gt;
      &lt;li&gt;전체 연합 사상
        &lt;ul&gt;
          &lt;li&gt;블록 중 아무 곳이나 하나 정해서 기억&lt;/li&gt;
          &lt;li&gt;메모리 워드의 번지 + 데이터 함께 저장, RR 방식으로 교체&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;세트 연합 사상&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;페이지-교체-알고리즘&quot;&gt;페이지 교체 알고리즘&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;NUR(Not Used Recently)
    &lt;ul&gt;
      &lt;li&gt;참조비트, 변형비트 ⇒ ‘1’ 최근 / ‘0’ 예전&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;파일의-구조&quot;&gt;파일의 구조&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;직접 파일(Direct Access File)
    &lt;ul&gt;
      &lt;li&gt;해싱 사상 함수에 의해 물리적인 주소로 변환하여 데이터를 기록 / 검색&lt;/li&gt;
      &lt;li&gt;한 번 파일을 개방하면 읽거나 쓰기를 자유롭게&lt;/li&gt;
      &lt;li&gt;평균 접근 시간 내 접근&lt;/li&gt;
      &lt;li&gt;디스크 기억 장치에 많이 이용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;파일-시스템의-기능&quot;&gt;파일 시스템의 기능&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;파일 저장 / 공유 / 생성 / 변경 / 제거 / 응용 처리&lt;/li&gt;
  &lt;li&gt;백업, 복구, 여러 종류의 접근 제어 방법 제공, 파일 간 정보 전송&lt;/li&gt;
  &lt;li&gt;기호형 이름을 사용 ⇒ 자신의 파일을 참조할 수 있도록 장치 독립성을 제공&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;디렉터리&quot;&gt;디렉터리&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;비순환(주기) 그래프 디렉터리
    &lt;ul&gt;
      &lt;li&gt;트리구조와 유사, 사이클 불허&lt;/li&gt;
      &lt;li&gt;하나의 파일을 여러 사용자가 공유하기 때문에 삭제 시 문제점 발생&lt;/li&gt;
      &lt;li&gt;융통성이 있으며 기억 공간을 절약할 수 있으나 복잡&lt;/li&gt;
      &lt;li&gt;하나의 파일이 다수의 이름으로 존재&lt;/li&gt;
      &lt;li&gt;공유하고 있는 파일 제거 시 Dangling Pointer 발생 가능&lt;/li&gt;
      &lt;li&gt;Unix 운영체제에서 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;보안-유지-방식&quot;&gt;보안 유지 방식&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;외부 보안 : 천재지변으로부터 컴퓨터를 보호&lt;/li&gt;
  &lt;li&gt;내부 보안 : 운영체제/하드웨어 내장, 프로그램의 신뢰성 있는 운영/무결성 보장&lt;/li&gt;
  &lt;li&gt;사용자 인터페이스 보안 : 인증, 패스워드&lt;/li&gt;
  &lt;li&gt;암호화
    &lt;ul&gt;
      &lt;li&gt;비밀키 = 공통키 = 대칭키 = 관용키 = 단일키 = Private Key System
        &lt;ul&gt;
          &lt;li&gt;암호화 키 = 복호화 키&lt;/li&gt;
          &lt;li&gt;DES, 평문을 암호화&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;공개키 = 비대칭키
        &lt;ul&gt;
          &lt;li&gt;암호화 키(공개) != 복호화 키(보호)&lt;/li&gt;
          &lt;li&gt;키 분배가 간단, 암호화 과정 복잡, 속도가 느림&lt;/li&gt;
          &lt;li&gt;RSA, PGP&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;flynn&quot;&gt;Flynn&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;SISD : 개인 컴퓨터, Pipeline 기법&lt;/li&gt;
  &lt;li&gt;MISD : 실제 없음&lt;/li&gt;
  &lt;li&gt;SIMD : 대형 컴퓨터, Array Processor&lt;/li&gt;
  &lt;li&gt;MIMD : 분산/병렬 컴퓨터
    &lt;ul&gt;
      &lt;li&gt;교환형 다중 처리기 : 크로스바 교환 행렬(버스의 수 만큼 메모리 증가)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;분산-시스템의-결함&quot;&gt;분산 시스템의 결함&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;링크 결함, 사이트 결함, 메시지의 분실&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;분산-처리-시스템의-계층-구조&quot;&gt;분산 처리 시스템의 계층 구조&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;하드웨어 ⇒ 기억 장치 ⇒ 프로세스 ⇒ 파일 시스템 ⇒ 사용자 응용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;unix-기본-구성&quot;&gt;UNIX 기본 구성&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;쉘
    &lt;ul&gt;
      &lt;li&gt;명령의 입력을 받아 시스템 기능을 수행하는 명령 해석기&lt;/li&gt;
      &lt;li&gt;사용자 시스템 간 인터페이스 담당, 여러 가지 내장 명령어 보유&lt;/li&gt;
      &lt;li&gt;파이프라인 기능, 입출력 방향 지정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;unix-특징&quot;&gt;UNIX 특징&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Pipe : 먼저 입력된 데이터를 먼저 처리하는 선형 구조(FIFO) 형태로 통신 경로 확보&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;unix-파일-시스템&quot;&gt;UNIX 파일 시스템&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;부트 블록&lt;/li&gt;
  &lt;li&gt;실린더 블록&lt;/li&gt;
  &lt;li&gt;i-Node 테이블
    &lt;ul&gt;
      &lt;li&gt;사용자 ID, 그룹 ID, 보호모드, 블록 주소&lt;/li&gt;
      &lt;li&gt;처음 생성 시기, 마지막 사용 시기, 최종 수정 시기&lt;/li&gt;
      &lt;li&gt;파일 링크 수, 파일 속성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;파일 테이블 블록&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;unix-주요-명령어&quot;&gt;UNIX 주요 명령어&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Mount : 파일 시스템에 새로운 파일 시스템을 서브 디렉터리에 연결할 때 사용&lt;/li&gt;
&lt;/ul&gt;</content><author><name>SG Yoo.</name><email>many258@naver.com</email></author><category term="study" /><category term="(구)정보처리기사" /><category term="컴퓨터일반" /><summary type="html">주의) 해당 내용은 (구)정보처리기사, 컴퓨터일반 내용을 기반으로 문서화하였습니다. 수정이 필요하거나, 부족한 내용이 있을시 답글을 남겨주시면 해당 항목을 수정하겠습니다.</summary></entry><entry><title type="html">[(구)정처기/컴퓨터일반] (2) 전자계산기 자주 틀리는 내용 정리</title><link href="https://many258.github.io//study/electronic-calculator/" rel="alternate" type="text/html" title="[(구)정처기/컴퓨터일반] (2) 전자계산기 자주 틀리는 내용 정리" /><published>2021-01-26T00:00:00+09:00</published><updated>2021-01-26T12:17:34+09:00</updated><id>https://many258.github.io//study/%7Belectronic-calculator%7D</id><content type="html" xml:base="https://many258.github.io//study/electronic-calculator/">&lt;p class=&quot;notice--warning&quot;&gt;&lt;span style=&quot;color:red;font-weight:bold;&quot;&gt;주의)&lt;/span&gt;
해당 내용은 (구)정보처리기사, 컴퓨터일반 내용을 기반으로 문서화하였습니다.
수정이 필요하거나, 부족한 내용이 있을시 답글을 남겨주시면 해당 항목을 수정하겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;불-대수-기본-정리&quot;&gt;불 대수 기본 정리&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;A + A = A&lt;/td&gt;
      &lt;td&gt;A · A = A&lt;/td&gt;
      &lt;td&gt;A · 0 = 0&lt;/td&gt;
      &lt;td&gt;A + 0 = A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;A + 1 = 1&lt;/td&gt;
      &lt;td&gt;A · 1 = A&lt;/td&gt;
      &lt;td&gt;0 + 0 = 0&lt;/td&gt;
      &lt;td&gt;0 · 0 = 0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1 + 0 = 1&lt;/td&gt;
      &lt;td&gt;1 · 0 = 0&lt;/td&gt;
      &lt;td&gt;1 + 1 = 1&lt;/td&gt;
      &lt;td&gt;1 · 1 = 1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;A + A·B = A&lt;/td&gt;
      &lt;td&gt;A·(A + B) = A&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;논리게이트&quot;&gt;논리게이트&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Exclusive OR : A, B 입력 ⇒ 서로 다를 때 1출력, 같을 때 0 출력&lt;/li&gt;
  &lt;li&gt;Exclusive NOT OR : A,B 입력 값 ⇒ 서로 같을 때 1, 다를 때 0 출력&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;조합-논리-회로&quot;&gt;조합 논리 회로&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;반가산기(Half Adder) : AND(1) + XOR(1)
    &lt;blockquote&gt;
      &lt;p&gt;S : A ⊕ B / C : A·B&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;반감산기(Half Subtracter) : NOT(1) + AND(1) + XOR(1)
    &lt;blockquote&gt;
      &lt;p&gt;D : X ⊕ Y / B : X’ · Y&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;전가산기(Full Adder) : Half Adder(2) + OR(1)
    &lt;blockquote&gt;
      &lt;p&gt;S : A ⊕ B ⊕ C / C : (A ⊕ B) · C + A · B = A · B + B · C + A · C&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;전감산기(Full Subtracter) : Half Subtracter(2) + OR(1)
    &lt;blockquote&gt;
      &lt;p&gt;D = X ⊕ Y ⊕ B / B = (X ⊕ Y)’·B + X’ · Y&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;병렬 가산기 :&lt;br /&gt;
반가산기(2n-1)개 + OR(n-1)개 / 전가산기(n개)를 여러 개 사용&lt;/li&gt;
  &lt;li&gt;디코더 = 해독기&lt;br /&gt;
N개의 입력 ⇒ 2&lt;sup&gt;n&lt;/sup&gt;개의 출력&lt;/li&gt;
  &lt;li&gt;인코더&lt;br /&gt;
2&lt;sup&gt;n&lt;/sup&gt;개의 입력 ⇒ n개의 출력&lt;/li&gt;
  &lt;li&gt;멀티플렉서 == 선택기&lt;br /&gt;
2&lt;sup&gt;n&lt;/sup&gt;개의 입력선 + n개의 선택선 ⇒ 하나의 출력&lt;/li&gt;
  &lt;li&gt;디멀티플렉서&lt;br /&gt;
하나의 입력 정보 + n개의 선택선 ⇒ 2&lt;sup&gt;n&lt;/sup&gt; 개의 출력&lt;/li&gt;
  &lt;li&gt;비교기 : Exclusive NOR(n개) 연결&lt;/li&gt;
  &lt;li&gt;3-상태 버퍼&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;순서-논리-회로&quot;&gt;순서 논리 회로&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;플립플롭 : 현 상태값에 관계 없이 입력 값을 다음 상태로 전달하는 특징이 있음&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;RS플립플롭 : S, R 단자가 모두 1인 경우 ⇒ 불허용&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;blockquote&gt;
      &lt;p&gt;JK 플립플롭 : S, R 단자가 모두 1인 경우 ⇒ 반전(토글)&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;blockquote&gt;
      &lt;p&gt;D 플립플롭 : 배타적인 경우만 이용, D 입력(1) ⇒ 출력(1)&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;blockquote&gt;
      &lt;p&gt;T 플립플롭 : 토글 기능만 작동&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;마스터 슬래이브 플립플롭 : Race 현상 해결하기 위해&lt;/li&gt;
  &lt;li&gt;카운터&lt;/li&gt;
  &lt;li&gt;레지스터&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;자료의-외부-표현&quot;&gt;자료의 외부 표현&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;BCD : Zone(2Bit) + Digit(4Bit) ⇒ 6Bit&lt;/li&gt;
  &lt;li&gt;EBCDIC : Zone(4Bit) + Digit(4Bit) ⇒ 8Bit&lt;/li&gt;
  &lt;li&gt;ASCII : Zone(3Bit) + Digit(4Bit) ⇒ 7Bit + Parity(1Bit)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;고정-소수점-수에서-음수-표현-방식에-따른-특징&quot;&gt;고정 소수점 수에서 음수 표현 방식에 따른 특징&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;수의 표현 범위
    &lt;ul&gt;
      &lt;li&gt;부호와 절대치 : -(2^(n-1)-1) ~ 2^(n-1)-1&lt;/li&gt;
      &lt;li&gt;1의 보수 : -(2^(n-1)-1)~2^(n-1)-1&lt;/li&gt;
      &lt;li&gt;2의 보수 : -2^(n-1) ~ 2^(n-1)-1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;부동-소수점&quot;&gt;부동 소수점&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;부호(1), 지수(8), 가수(23)&lt;/li&gt;
  &lt;li&gt;나눗셈 과정 :
    &lt;ul&gt;
      &lt;li&gt;0인지 조사 ⇒&lt;/li&gt;
      &lt;li&gt;부호 결정 ⇒&lt;/li&gt;
      &lt;li&gt;피젯수를 위치 조정 ⇒&lt;/li&gt;
      &lt;li&gt;지수 뺄셈 ⇒&lt;/li&gt;
      &lt;li&gt;가수 나눗셈 ⇒&lt;/li&gt;
      &lt;li&gt;결과의 정규화&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;메가플롭스(MFLOPS) : 1초간에 실행되는 부동 소수점 연산의 수를 100만 단위로 표현&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;10진-표현&quot;&gt;10진 표현&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;언팩 10진 표현 :  연산 불가, 입출력 작업 시&lt;br /&gt;
부호는 맨 마지막 바이트의 존 부분에 표현(+:C(1100), -:D(1101))&lt;/li&gt;
  &lt;li&gt;팩 10진 표현 :&lt;br /&gt;
연산 가능, 부호는 맨 마지막 4비트(+:C(1100), -:D(1101))&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;코드의-분류&quot;&gt;코드의 분류&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;가중치 코드 : 자리 값을 가지고 있는 코드
    &lt;ul&gt;
      &lt;li&gt;8421, 2421, 7421, 5421, 5111, Biquinary, Ring Counter&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;비가중치 코드 : 자리 값이 없는 코드
    &lt;ul&gt;
      &lt;li&gt;3초과 코드, 그레이 코드, 2-out-of-5 코드, 3-out-of-5 코드&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;자기 보수 코드 : 코드의 1의 보수 == 10진수의 9의 보수&lt;/li&gt;
  &lt;li&gt;3초과 코드, 2421, 5211, 5111, 8421&lt;/li&gt;
  &lt;li&gt;에러 검출 코드
    &lt;ul&gt;
      &lt;li&gt;패리티, 해밍, 2-out-of-5 코드, 3-out-of-5 코드, Biquinary, Ring Counter&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Gray 코드 : 기계적인 동작을 제어하는데 적당&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;수치적-연산&quot;&gt;수치적 연산&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;산술 시프트&lt;/li&gt;
  &lt;li&gt;우측 산술 시프트
    &lt;blockquote&gt;
      &lt;p&gt;부호와 절대치 표현 ⇒ 부호 비트 고정
1의 보수 ⇒ 음수일 경우 1 패딩
2의 보수 ⇒ 음수일 경우 1 패딩&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;좌측 산술 시프트
    &lt;blockquote&gt;
      &lt;p&gt;부호와 절대치 표현 ⇒ 부호 비트 고정
1의 보수 ⇒ 부호 비트 고정, 음수일 경우 1패딩
2의 보수 ⇒ 부호 비트 고정&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;명령어의-구조&quot;&gt;명령어의 구조&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;연산자 = Op-Code : Op-Code (n)Bit ⇒ 명령어 생성 개수 = 2^n&lt;/li&gt;
  &lt;li&gt;모드 : 직접 주소 / 간접 주소&lt;/li&gt;
  &lt;li&gt;주소 : 메모리 용량이 2^n ⇒ Operand (n)Bit&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;연산자operation-op-code의-기능&quot;&gt;연산자(Operation, Op-Code)의 기능&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;함수 연산 기능, 제어 기능, 전달 기능, 입출력 기능&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;명령어-세트의-효율성을-향상시키기-위한-고려사항&quot;&gt;명령어 세트의 효율성을 향상시키기 위한 고려사항&lt;/h3&gt;
&lt;p&gt;기억 공간, 사용 빈도, 주기억 장치의 밴드폭 사용, 주소 지정 방식
함수 연산 기능 대 기타 연산 기능의 비율&lt;/p&gt;

&lt;h3 id=&quot;명령어-설계-과정-고려사항&quot;&gt;명령어 설계 과정 고려사항&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;연산자의 수, 종류 / 주소 지정 방식 / 데이터 구조 / 워드 크기&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;명령어의-종류&quot;&gt;명령어의 종류&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;데이터 처리 명령어&lt;br /&gt;
ADD / SUB / MUL / DIV
INC / DEC
AND / OR / XOR / COMPLEMENT / CLEAR
산술, 논리 SHIFT / ROTATE&lt;/li&gt;
  &lt;li&gt;데이터 전송 명령어&lt;br /&gt;
LOAD / STORE / MOVE / PUSH / POP / INPUT / OUTPUT&lt;/li&gt;
  &lt;li&gt;데이터 제어 명령어&lt;br /&gt;
JUMP / SMA / SZC / SKIP / SZA / ISZ / RETI / CALL / RETURN / HALT&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;명령어-메모리-참조-형식&quot;&gt;명령어 메모리 참조 형식&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;레지스터 참조 명령(RRI : Register Reference Instruction)&lt;/li&gt;
  &lt;li&gt;메모리 참조 명령(MRI : Memory Reference Instruction)&lt;/li&gt;
  &lt;li&gt;입출력 명령(IOI : Input Output Instruction)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;주소-지정-방식&quot;&gt;주소 지정 방식&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;즉시 주소(Immediate Address) :&lt;br /&gt;
주소 부분에 실제 데이터가 들어있는 방식&lt;/li&gt;
  &lt;li&gt;직접 주소(Direct Address) :&lt;br /&gt;
주소 부분에 실제 데이터가 들어있는 유효주소가 있음&lt;/li&gt;
  &lt;li&gt;계산에 의한 주소(Calculate Address)&lt;/li&gt;
  &lt;li&gt;인덱스 주소 지정(Index Register Address) :&lt;br /&gt;
인덱스 레지스터, 배열 엑세스 방식&lt;/li&gt;
  &lt;li&gt;상대 주소 지정(Relative Address) :&lt;br /&gt;
PC, 데이터 영역의 배치와 Program 배치 유사, 분기 명령&lt;/li&gt;
  &lt;li&gt;기준 주소 지정(Base Register Address) :&lt;br /&gt;
베이스 레지스터, 프로그램 재배치, 다중 프로그래밍 기법에서 주로 사용&lt;/li&gt;
  &lt;li&gt;간접 주소(Indirect Address)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cpu의-구분&quot;&gt;CPU의 구분&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;스택 구조 CPU : 0 주소 명령어 형식, Postfix 표기법&lt;/li&gt;
  &lt;li&gt;단일 누산기 구조 CPU : 1주소 명령어 형식, Infix 표기법&lt;/li&gt;
  &lt;li&gt;범용 레지스터 구조 CPU : 2주소 명령어 형식, Prefix 표기법&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;프로세서의-종류&quot;&gt;프로세서의 종류&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;CISC(Complex Instruction Set Computer)&lt;br /&gt;
초창기 컴퓨터, 마이크로 프로그램 제어 방식 사용&lt;br /&gt;
메모리 참조 연산&lt;/li&gt;
  &lt;li&gt;RISC(Reduced Instruction Set Computer)&lt;br /&gt;
하드 와이어드 제어 방식&lt;br /&gt;
중요 명령어 ROM에 저장&lt;br /&gt;
명령어 길이 고정, 명령어의 개수 적음&lt;br /&gt;
레지스터 참조 연산&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;레지스터&quot;&gt;레지스터&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;AR(Address Register) : 기억용량과 관련, 주기억장치 / 워드 길이&lt;/li&gt;
  &lt;li&gt;PC(Program Counter)&lt;/li&gt;
  &lt;li&gt;MAR(Memory Address Register)&lt;/li&gt;
  &lt;li&gt;DR(Data Register) : 기억 장치의 워드 크기와 관련&lt;/li&gt;
  &lt;li&gt;MBR(Memory Buffer Register)&lt;/li&gt;
  &lt;li&gt;Status Register : 프로그램 제어를 위한 상태 정보를 기억&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;명령어-수행-순서&quot;&gt;명령어 수행 순서&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;명령어 인출 ⇒ 명령어 해독 ⇒ 오퍼랜드 인출 ⇒ 실행 ⇒ 인터럽트 조사&lt;br /&gt;
Instruction Fetch ⇒ Instruction Decoder ⇒ Operand Fetch ⇒ Exe ⇒ Interrupt Search&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;마이크로-오퍼레이션&quot;&gt;마이크로 오퍼레이션&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;하나의 클록 펄스 동안 실행되는 기본 동작을 의미&lt;/li&gt;
  &lt;li&gt;CPU에 있는 레지스터와 플래그의 상태 변환을 일으키게 하는 동작&lt;/li&gt;
  &lt;li&gt;CPU에서 발생시키는 제어 신호에 따라 마이크로 오퍼레이션이 순서적 실행&lt;/li&gt;
  &lt;li&gt;동기 고정식 마이크로오퍼레이션
    &lt;ul&gt;
      &lt;li&gt;마이크로 사이클 타임이 가장 긴 것 == 클록 주기&lt;/li&gt;
      &lt;li&gt;수행 시간이 차이가 날 때 CPU의 시간 낭비, 구현 간단&lt;/li&gt;
      &lt;li&gt;여러 종류의 MO 수행 시 CPU 사이클 타임이 실제적인 오퍼레이션 시간보다 김&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;클럭-사이클-시간&quot;&gt;클럭 사이클 시간&lt;/h3&gt;
&lt;p&gt;조합 논리 회로 : 세그먼트 중 가장 긴 것 + 가장 짧은 것&lt;/p&gt;

&lt;h3 id=&quot;메이져-상태&quot;&gt;메이져 상태&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;인출 주기&lt;/li&gt;
  &lt;li&gt;간접 주기&lt;/li&gt;
  &lt;li&gt;실행 주기
    &lt;ul&gt;
      &lt;li&gt;ADD&lt;/li&gt;
      &lt;li&gt;AND&lt;/li&gt;
      &lt;li&gt;LOAD&lt;/li&gt;
      &lt;li&gt;STORE&lt;/li&gt;
      &lt;li&gt;BUN(JUMP)&lt;/li&gt;
      &lt;li&gt;BSA(Branch and Save Return Address)&lt;/li&gt;
      &lt;li&gt;ISZ(Increment and Skip if Zero) : 프로그램의 수행 순서를 조건에 따라 결정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인터럽트 주기&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;제어-장치&quot;&gt;제어 장치&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;제어 메모리 : 액세스 타임이 빠른 ROM으로 만들어진다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;cpu의-제어-데이터&quot;&gt;CPU의 제어 데이터&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;제어 데이터&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;인출&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;간접&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;실행&lt;/th&gt;
      &lt;th&gt;인터럽트&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;메이저 상태를 변화시키는 데이터&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;명령어&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;직/간접 주로 방식을 판별하는 비트&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;인터럽트 요청 신호&lt;/td&gt;
      &lt;td&gt;없음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;CPU의 제어점을 제어하는 데이터&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;명령어&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;명령어의 연산자 부분&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;명령어의 연산자 부분&lt;/td&gt;
      &lt;td&gt;기종에 따라 다름&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;명령 수행 순서를 결정하는 제어 데이터&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;명령어&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;기억 장치에서 읽어낸 실제 데이터 주소&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;PC&lt;/td&gt;
      &lt;td&gt;기종에 따라 다름&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;마이크로-프로그램&quot;&gt;마이크로 프로그램&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;일련의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;제어 워드&lt;/code&gt;가 특수한 기억 장치 속에 저장되어 기계어 명령어들이 적절히 수행되도록 각종 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;제어 신호를 발생&lt;/code&gt;시키는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;프로그램&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;제어-장치의-구현-방법&quot;&gt;제어 장치의 구현 방법&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;고정 배선식 제어 방식(Hard Wired)&lt;br /&gt;
하드웨어적, 속도 빠름, 변경 불가, 회로 복잡, 변경이 어려움&lt;/li&gt;
  &lt;li&gt;마이크로프로그램 제어 방식&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;제어-메모리에서-번지-결정-방법&quot;&gt;제어 메모리에서 번지 결정 방법&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;순차 수행 : 제어 주소 레지스터의 내용을 +1 결정&lt;/li&gt;
  &lt;li&gt;무조건 분기 : 마이크로 명령어 상에 있는 분기 주소에 나타난 다음 명령어 수행&lt;/li&gt;
  &lt;li&gt;조건 분기 : 상태 플래그의 내용에 따라&lt;/li&gt;
  &lt;li&gt;서브 루틴 : 독립된 서브 마이크로프로그램 호출하여 수행&lt;/li&gt;
  &lt;li&gt;매크로 : 반복되는 부분을 매크로로 정의하고 직접 제어 메모리로 매핑&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;주기억-장치&quot;&gt;주기억 장치&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;DRAM&lt;br /&gt;
재충전 시간이 필요하므로 사이클 시간 &amp;gt; 접근 시간&lt;/li&gt;
  &lt;li&gt;DRO(파괴성 판독 : Destructive Read Out)
    &lt;ul&gt;
      &lt;li&gt;메모리에서 데이터를 읽어내면서 원래의 데이터를 소거하는 판독 방법으로 메모리에서 정보를 보존하려면 읽어낸 뒤 즉시 재기입하여하 하기 때문에&lt;/li&gt;
      &lt;li&gt;사이클 타임 &amp;gt; 접근 시간&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SSD(Solid State Drive) : 메모리 반도체를 사용하는 대용량 저장 장치
    &lt;ul&gt;
      &lt;li&gt;SLC / MLC / TLC(속도 빠름/수명 길다 ↔ 속도 느림/수명 짧음)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CPLD(Complex Programmable Logic Device)
    &lt;ul&gt;
      &lt;li&gt;LAB, PIA로 구성되어 규칙적이고 빠른 타이밍이 필요하거나 어드레스 디코더 같은 간단한 로직 구현에 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;보조-기억-장치&quot;&gt;보조 기억 장치&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;자기 디스크
    &lt;ul&gt;
      &lt;li&gt;등선 속도(CLV : Constant Linear Velocity)
        &lt;ul&gt;
          &lt;li&gt;디스크의 안쪽, 바깥쪽 회전 속도가 일정하지 않음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;등각 속도(CAV : Constant Angular Velocity)
        &lt;ul&gt;
          &lt;li&gt;외부 면의 저장 밀도가 떨어져 공간 낭비 유발, 접근 속도 빠름&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;블루레이&lt;br /&gt;
405nm 파장의 청자색 레이저 사용, DVD보다 많이 저장 가능&lt;br /&gt;
한 면에 최대 27GB, 듀얼 50GB, MPEG-2 압축 방식&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;캐시메모리&quot;&gt;캐시메모리&lt;/h3&gt;
&lt;p&gt;캐시 메모리 평균 액세스 시간 = 히트 시간 + 미스도 + 미스 패널티&lt;br /&gt;
캐시 블록 번호 = 주기억 장치 블록 번호(= 번지 / 블록 크기) MOD 캐시 전체의 블록 수&lt;br /&gt;
캐시 메모리에 데이터 저장 시 주기억 장치와의 관계&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Write Through : 캐시에 저장이 일어날 때 캐시와 주기억 장치를 동시에 갱신&lt;/li&gt;
  &lt;li&gt;Write Back : 캐시의 내용만 갱신이 일어나다가 블록이 캐시에서 제거될 때, 주기억에 복사해서 갱신&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;연관-기억-장치associative-memory&quot;&gt;연관 기억 장치(Associative Memory)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;기억된 정보의 일부분을 이용하여 원하는 정보를 검색 ⇒ 주소가 필요 없음&lt;/li&gt;
  &lt;li&gt;신속한 검색, 병렬판독회로 내장(가격이 비싸다)&lt;/li&gt;
  &lt;li&gt;작은 용량의 IC메모리를 사용하여 캐시 메모리나 가상 메모리의 주소 탐색에 주로 이용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;가상-기억-장치&quot;&gt;가상 기억 장치&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;실제 페이지의 개수 = 주기억 장치 용량 / 하나의 페이지 크기&lt;/li&gt;
  &lt;li&gt;가상 페이지의 개수 = 가상 주소(nBit ⇒ 2^n) / 하나의 페이지 크기&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;메모리-인터리빙&quot;&gt;메모리 인터리빙&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;독립된 메모리를 2개 이상 나누어 연결하고 CPU에서 각각 독립된 메모리를 번갈아가면서 연속적으로 액세스가 이루어지도록 구현하는 방법&lt;/li&gt;
  &lt;li&gt;CPU의 처리속도에 비해 사이클 타임이 오래 걸리지만, 접근하는 시간은 효율적&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;기억-장치--입출력-장치&quot;&gt;기억 장치 / 입출력 장치&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;동작 속도 / 정보 단위 / 동작의 자율성 / 에러율&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;입출력-제어기의-역할&quot;&gt;입출력 제어기의 역할&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;데이터 버퍼링 / 제어 신호의 논리적, 물리적 변환&lt;/li&gt;
  &lt;li&gt;통신 회선 확보 / 상태 정보 저장 / 주기억 장치 접근 / 데이터 교환&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;고립형-입출력-포트io-mapped-io-port&quot;&gt;고립형 입출력 포트(I/O Mapped I/O Port)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;입출력 포트와 메모리 주소가 독립적인 상태&lt;/li&gt;
  &lt;li&gt;마이크로프로세서는 뚜렷한 입출력 명령을 가짐
각 명령은 인터페이스 레지스터의 주소를 가짐&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;메모리-맵-입출력-포트memory-mapped-io-port&quot;&gt;메모리 맵 입출력 포트(Memory Mapped I/O Port)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;입출력 포트와 메모리 주소가 종속적인 상태&lt;/li&gt;
  &lt;li&gt;마이크로프로세서가 인터페이스 레지스터를 메모리 시스템의 한 부분으로 인식&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dmadirect-memory-access&quot;&gt;DMA(Direct Memory Access)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;단어 계수기는 입출력이 일어날 때마다 하나씩 감소하여 0이 되면 인터럽트를 요청하여 블록에 대한 입출력이 완료되었음을 CPU에게 알림&lt;/li&gt;
  &lt;li&gt;구성요소
    &lt;ul&gt;
      &lt;li&gt;인터페이스 회로 :  CPU ↔ 입출력 장치 통신&lt;/li&gt;
      &lt;li&gt;번지 레지스터 :  기억 장치와 위치 지정을 위한 번지를 기억&lt;/li&gt;
      &lt;li&gt;워드카운터 레지스터 : 전송되어야 할 워드의 수 표시&lt;/li&gt;
      &lt;li&gt;제어 레지스터 : 전송 방식을 결정&lt;/li&gt;
      &lt;li&gt;데이터 버스 버퍼, 주소 버스 버퍼&lt;/li&gt;
      &lt;li&gt;Data Buffer Register / F Flip-Flop / Status Register / Address Register / Word Counter&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;사이클-스틸&quot;&gt;사이클 스틸&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;CPU 상태를 보존할 필요가 없음&lt;/li&gt;
  &lt;li&gt;CPU가 잠시 쉴 수 있음&lt;/li&gt;
  &lt;li&gt;아무 사이클이나 상관없이 훔치는 것이 가능&lt;/li&gt;
  &lt;li&gt;DMA의 우선순위는 메모리 참조의 경우 CPU장치보다 상대적으로 높음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;채널&quot;&gt;채널&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Interlock Channel : 하나 이상의 입출력 요청이 들어올 경우 이를 적절히 수행&lt;/li&gt;
  &lt;li&gt;Crossbar Channel : 여러 개의 채널 제어기 중 아무거나 사용해서 입출력할 수 있는 방식&lt;/li&gt;
  &lt;li&gt;버스트 모드 : 하나의 I/O 장치가 데이터 전송을 하고 있는 동안 채널의 기능을 완전히 독점하여 대량의 데이터를 고속으로 전송&lt;/li&gt;
  &lt;li&gt;멀티플렉서 모드 : 여러 개의 I/O 장치가 채널의 기능을 공유하여 시간 분할 형식으로 데이터를 전송하는 형태, 저속의 I/O 장치 여러 개를 연결하는 방식&lt;/li&gt;
  &lt;li&gt;입출력 수행 중 어떤 에러 조건에서 CPU에 인터럽트를 걸 수 있음&lt;/li&gt;
  &lt;li&gt;구성요소
    &lt;ul&gt;
      &lt;li&gt;채널 명령어(CCW : Channel Command Word) : 주기억 장치에 있는 하나의 블록 입출력 정보를 가지고 있는 명령어
        &lt;ul&gt;
          &lt;li&gt;Operation Code : I/O 여부 / 분기 / 입출력 장치 제어 / 채널 동작 정보&lt;/li&gt;
          &lt;li&gt;블록 주소 : 블록의 첫 번째 시작 주소&lt;/li&gt;
          &lt;li&gt;블록의 단어수 : 입출력하고자 하는 블록 워드의 개수&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;다음 채널 명령의 주소 : PC가 없으므로 다음에 수행해야 할 명령어 있음&lt;/li&gt;
      &lt;li&gt;채널 주소 단어(CAW : Channel Address Word) : 채널 명령어의 시작 주소를 기억&lt;/li&gt;
      &lt;li&gt;채널 상태 단어(CSW : Channel Status Word) : 채널 정보, I/O 장치 정보 레지스터&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;인터럽트-종류&quot;&gt;인터럽트 종류&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;페이지 폴트 / 캐시 미스 인터럽트&lt;/li&gt;
  &lt;li&gt;외부 인터럽트 : 타이머 인터럽트나 조작원의 의도적 동작인 입출력 인터럽트&lt;/li&gt;
  &lt;li&gt;내부 인터럽트 : 0으로 나누기 / 불법적인 명령어 사용 / 오버, 언더 플로우
    &lt;ul&gt;
      &lt;li&gt;트랩 : 어떤 프로세스가 특정 시스템 기능을 사용하려고 할 때 OS에게 요청&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I/O 인터럽트 : 의도적으로 인터럽트 발생 가능&lt;/li&gt;
  &lt;li&gt;SVC(Super Visor Call) : 사용자가 프로그램을 이용하여 직접 인터럽트를 호출&lt;/li&gt;
  &lt;li&gt;차단 불가능 인터럽트(NMI : Non-Maskable Interrupt)
    &lt;ul&gt;
      &lt;li&gt;인터럽트 마스크에 영향을 받지 않는 우선순위가 가장 높은 인터럽트&lt;/li&gt;
      &lt;li&gt;정전, 심각한 하드웨어 이상 인터럽트에 해당&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;인터럽트-발생-시-cpu의-처리-사항&quot;&gt;인터럽트 발생 시 CPU의 처리 사항&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;PC&lt;/li&gt;
  &lt;li&gt;프로그램에서 사용한 모든 레지스터의 내용&lt;/li&gt;
  &lt;li&gt;플래그 상태 조건 내용&lt;/li&gt;
  &lt;li&gt;스택의 내용 / 메모리 0번지의 내용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;인터럽트-우선순위-부여-방식&quot;&gt;인터럽트 우선순위 부여 방식&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;폴링 = 프로그램에 의한 I/O 제어 방식
    &lt;ul&gt;
      &lt;li&gt;CPU와 I/O 장치 사이의 데이터 전달이 프로그램에 의해서 제어되는 방법&lt;/li&gt;
      &lt;li&gt;프로그램에서 D와 B 상태를 검사하여 데이터를 전송&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인터럽트 요청 체인 방식&lt;/li&gt;
  &lt;li&gt;인터럽트 우선순위 체인 방식&lt;/li&gt;
  &lt;li&gt;병렬 우선순위 부여 방식
    &lt;ul&gt;
      &lt;li&gt;처리 중인 인터럽트보다 우선순위가 낮은 것을 비활성화시키는 마스크 레지스터&lt;/li&gt;
      &lt;li&gt;인터럽트 처리 루틴 없이 인터럽트 취급 루틴 시작&lt;/li&gt;
      &lt;li&gt;CPU에 있는 인터럽트 레지스터의 각 비트는 요청 회선과 연결&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;인터럽트-작동-순서&quot;&gt;인터럽트 작동 순서&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;인터럽트 요청 ⇒ 현 상태 보존 ⇒ 인터럽트 판별 ⇒ 인터럽트 취급 ⇒ 원 상태 복귀&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;병렬-컴퓨터-구조&quot;&gt;병렬 컴퓨터 구조&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;파이프라인 클록 타임
    &lt;blockquote&gt;
      &lt;p&gt;T = (k + (N -1)) (k:파이프라인 단계 수, N : 수행할 명령어의 개수)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;상호연결-구조&quot;&gt;상호연결 구조&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;다중 처리기
    &lt;ul&gt;
      &lt;li&gt;Bus, 크로스바 스위치, 다단 상호 연결망(오메가 스위치)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;다중 컴퓨터
    &lt;ul&gt;
      &lt;li&gt;Bus, 그리드, 하이퍼큐브&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;시스톨릭-배열systolic-array&quot;&gt;시스톨릭 배열(Systolic Array)&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;파이프라인 어레이 구조&lt;/code&gt;의 새로운 범주로서 지역적으로 연결된 프로세서들이 규칙적으로 데이터를 계산하고 시스템을 통해 데이터를 전달하는 프로세서 네트워크&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;벡터 처리기&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MISD&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;파일-보호-기법&quot;&gt;파일 보호 기법&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;파일 명명, 접근 제어, 암호화&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;보안-유지-방식&quot;&gt;보안 유지 방식&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;부인 방지(Non-repudiation)&lt;/code&gt; : 데이터를 송수신한 자가 송수신 사실을 부인할 수 없도록 송수신 증거를 제공하는 것, 공개키 암호 방식 이용&lt;/p&gt;</content><author><name>SG Yoo.</name><email>many258@naver.com</email></author><category term="study" /><category term="(구)정보처리기사" /><category term="컴퓨터일반" /><summary type="html">주의) 해당 내용은 (구)정보처리기사, 컴퓨터일반 내용을 기반으로 문서화하였습니다. 수정이 필요하거나, 부족한 내용이 있을시 답글을 남겨주시면 해당 항목을 수정하겠습니다.</summary></entry><entry><title type="html">[(구)정처기/컴퓨터일반] (1) 데이터베이스 자주 틀리는 내용 정리</title><link href="https://many258.github.io//study/database/" rel="alternate" type="text/html" title="[(구)정처기/컴퓨터일반] (1) 데이터베이스 자주 틀리는 내용 정리" /><published>2021-01-25T00:00:00+09:00</published><updated>2021-01-25T20:47:34+09:00</updated><id>https://many258.github.io//study/%7Bdatabase%7D</id><content type="html" xml:base="https://many258.github.io//study/database/">&lt;p class=&quot;notice--warning&quot;&gt;&lt;span style=&quot;color:red;font-weight:bold;&quot;&gt;주의)&lt;/span&gt;
해당 내용은 (구)정보처리기사, 컴퓨터일반 내용을 기반으로 문서화하였습니다.
수정이 필요하거나, 부족한 내용이 있을시 답글을 남겨주시면 해당 항목을 수정하겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;데이터-모델의-구성요소&quot;&gt;데이터 모델의 구성요소&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;구조(Structure)&lt;/code&gt; : 개념적 / 논리적 구성 형태&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;연산(Operation)&lt;/code&gt; : 개체 인스턴스의 삽입, 삭제, 검색, 갱신 처리 방법&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;제약사항(Constraint)&lt;/code&gt; : 개체 인스턴스의 허용 기준&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;e-r-관계-모델&quot;&gt;E-R 관계 모델&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;원 : 속성 / 사각형 : 객체 / 마름모 : 관계&lt;/li&gt;
  &lt;li&gt;개념적 설계에서 주로 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;논리적-데이터-모델&quot;&gt;논리적 데이터 모델&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;개념적 구조 ⇒ 논리적 구조&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;네트워크-데이터-모델&quot;&gt;네트워크 데이터 모델&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;오너-멤버 관계, 그래프 구조 형태&lt;/li&gt;
  &lt;li&gt;연계성이 매우 우월, CODASYL / DBTG&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;관계-대수&quot;&gt;관계 대수&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;릴레이션으로부터 필요한 릴레이션을 만들어내는 연산자의 집합&lt;/li&gt;
  &lt;li&gt;릴레이션 조작을 위한 연산&lt;/li&gt;
  &lt;li&gt;원하는 정보와 그 정보를 어떻게 유도하는가를 기술하는 절차적인 방법&lt;/li&gt;
  &lt;li&gt;합집합 / 교집합 / 차집합 / 곱집합 / 설렉션 / 프로젝션 / 조인 / 디비젼&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;관계-해석&quot;&gt;관계 해석&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;수학의 프레디킷 해석에 기반&lt;/li&gt;
  &lt;li&gt;질의하는 형식, 구하고자 하는 정보가 무엇이라는 것만 명시하는 비절차적 형태&lt;/li&gt;
  &lt;li&gt;튜플 관계 해석 / 도메인 관계 해석&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;트랜잭션&quot;&gt;트랜잭션&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Atomicity(원자성)
— 일부의 완료는 부재(모두 반영하거나 전혀 반영하지 않는 성질)&lt;/li&gt;
  &lt;li&gt;Consistency(일관성)
—실행 전과 후가 같아야 한다는 성질, 무결성 유지&lt;/li&gt;
  &lt;li&gt;Isolation(독립성, 격리성)
— 실행되는 중간에 다른 트랜잭션 연산이 침범하지 못하는 성질&lt;/li&gt;
  &lt;li&gt;Durability(지속성, 계속성, 영속성)
— 변화된 상태는 계속해서 유지될 수 있어야 한다는 성질&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;병행-제어-기법&quot;&gt;병행 제어 기법&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;로킹(Locking) : 자원 이용에 대하여 상호배제 기능을 이용하는 기법&lt;/li&gt;
  &lt;li&gt;타임스탬프 순서(Timestamp Ordering) : 진입하는 트랜잭션 순서대로 타임스탬프를 지정하여 동시성을 제어하는 기법&lt;/li&gt;
  &lt;li&gt;검증 기법(Validation, 낙관적 기법) : 읽기 단계, 검증 단계, 기록 단계를 이용하여 직렬성 보장하는 기법, 사본에만 갱신 결과를 반영하다 최종적으로 검증과정을 통해 DB반영&lt;/li&gt;
  &lt;li&gt;다중버전 기법(Multi Version) : 각 트랜잭션은 순서적으로 부여된 버전을 이용&lt;/li&gt;
&lt;/ul&gt;</content><author><name>SG Yoo.</name><email>many258@naver.com</email></author><category term="study" /><category term="(구)정보처리기사" /><category term="컴퓨터일반" /><summary type="html">주의) 해당 내용은 (구)정보처리기사, 컴퓨터일반 내용을 기반으로 문서화하였습니다. 수정이 필요하거나, 부족한 내용이 있을시 답글을 남겨주시면 해당 항목을 수정하겠습니다.</summary></entry><entry><title type="html">Jekyll로 개인 블로그 시작해보기</title><link href="https://many258.github.io//life/start-wtih-jekyll/" rel="alternate" type="text/html" title="Jekyll로 개인 블로그 시작해보기" /><published>2021-01-21T00:00:00+09:00</published><updated>2021-01-21T00:00:00+09:00</updated><id>https://many258.github.io//life/%7Bstart-wtih-jekyll%7D</id><content type="html" xml:base="https://many258.github.io//life/start-wtih-jekyll/">&lt;h3 id=&quot;임시-테스트-문서입니다&quot;&gt;임시 테스트 문서입니다.&lt;/h3&gt;
&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;수정 작업 필요&lt;/li&gt;
&lt;/ul&gt;</content><author><name>SG Yoo.</name><email>many258@naver.com</email></author><category term="life" /><category term="Blog" /><summary type="html">임시 테스트 문서입니다. 수정 작업 필요</summary></entry></feed>